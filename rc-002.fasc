(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (628) ("ROS-01" si::select-package ros-01::find-next-indices ext::location (defun ros-01::find-next-indices) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/rosetta/rc-002.lisp" . 38) ext::annotate :lambda-list (ros-01::prev ros-01::last-idx) ros-01::prev ros-01::last-idx ros-01::idx eql #Y(nil nil nil (24 45 11 26 13 0 10 2 17 12 29) #1# #2# 38) every copy-seq iterate::next length 1- ros-01::end-next ros-01::i 0 + - < aref #:g299 #:g300 #:g302 #:g301 si::aset ros-01::j #:limit2 1+ > #Y(ros-01::find-next-indices nil nil (24 45 9 24 45 10 26 57 2 60 208 34 13 12 13 2 19 2 14 39 5 75 73 38 193 10 2 16 15 45 16 10 0 16 17 16 18 45 19 75 45 20 57 21 61 2 11 165 13 2 9 1 19 2 22 51 1 13 1 9 1 19 2 23 51 1 13 1 9 0 19 2 24 39 4 35 0 1 13 3 13 1 19 2 25 12 13 5 19 2 24 39 117 10 3 45 26 10 2 45 27 8 1 45 28 13 2 13 1 19 2 25 12 13 0 19 2 22 45 29 13 3 13 2 13 0 19 3 30 43 4 75 45 31 75 45 32 57 21 61 2 18 59 10 5 51 1 10 4 16 33 12 9 1 19 2 23 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 34 39 4 35 0 1 13 6 13 2 13 6 10 2 16 18 12 19 2 25 12 19 3 30 35 0 0 62 43 2 10 3 73 36 4 35 0 0 62 75 73 43 3 63 29) #1# #2# 38) si::fset ros-01::combinations-with-repetition (defun ros-01::combinations-with-repetition) (#2# . 1932) (set ros-01::k) set ros-01::k (and (integerp ros-01::k) (not (minusp ros-01::k))) si::assert-failure integerp minusp zerop = list mapcar vector coerce ros-01::set-vec ros-01::indices #:result6 #:end-pointer7 #:temp8 :initial-element make-array #Y(nil nil nil (24 45 11 26 13 7 13 0 19 2 25 29) #1# #2# 1932) map #:g323 #:g324 rplacd #Y(ros-01::combinations-with-repetition nil nil (24 45 41 24 45 42 26 38 6 15 43 19 1 44 10 0 16 45 39 6 10 0 16 46 76 76 40 -18 10 1 76 40 5 10 0 16 47 39 5 75 73 38 139 13 0 9 1 19 2 48 39 11 33 49 12 13 1 19 2 50 38 120 13 1 1 51 17 52 45 53 10 0 16 17 16 18 45 10 75 45 54 75 45 55 75 45 56 75 45 57 57 21 61 2 13 80 13 7 14 58 9 0 19 3 59 51 4 10 4 76 39 4 35 0 1 15 49 34 60 12 13 4 19 3 61 6 1 51 1 10 3 39 23 10 2 45 62 10 2 45 63 13 1 10 0 17 64 10 0 43 1 43 1 38 5 10 1 51 3 51 2 10 3 13 4 13 5 19 2 2 51 4 35 0 0 62 10 2 73 43 6 29) #1# #2# 1932) function "Given a list ``set'' and a non-negative
  integer ``k'', return a list of all
  k-sized combinations with repetition
  from the set." si::set-documentation ros-01::factorial (defun ros-01::factorial) (#2# . 2714) (ros-01::n) ros-01::n (and (integerp ros-01::n) (not (minusp ros-01::n))) * :start alexandria::iota apply #Y(ros-01::factorial nil nil (24 45 73 26 38 6 15 74 19 1 44 10 0 16 45 39 6 10 0 16 46 76 76 40 -18 10 0 16 47 39 6 8 1 73 38 17 33 75 12 13 0 14 76 9 1 19 3 77 12 19 2 78 29) #1# #2# 2714) "Factorial function for use in the
  multiset coefficient function." ros-01::multiset-coefficient (defun ros-01::multiset-coefficient) (#2# . 2944) (ros-01::n ros-01::k) / #Y(ros-01::multiset-coefficient nil nil (24 45 73 24 45 42 26 10 1 16 47 40 5 10 0 16 47 39 6 8 0 73 38 38 13 1 10 0 16 18 12 19 2 22 12 19 1 69 12 13 0 19 1 69 12 10 1 16 18 12 19 1 69 12 19 2 75 12 19 2 85 29) #1# #2# 2944) "Given integers n and k, return the
  number of k-length distinct combinations
  with repetition can be made with n distinct
  elements from which to choose." ros-01::*my-hash* si::*make-special :test equal :size :rehash-size 1.0 :rehash-threshold 0.75 make-hash-table variable "The hash-table is a basic type in 
  common lisp. All arguments 
  in the constructor are optional.
  The :test arg takes one of four equality
  functions used for the keys.
  #'eq works only with symbols. #'eql 
  (the default) works with symbols, 
  numbers or characters. #'equal works
  with symbols, numbers, characters, 
  flat lists, strings, and bitvectors.
  #'equalp works with all that #'equal does,
  and in addition, works with arrays and 
  treats strings in a case-insensitive 
  manner. The more general the equality test,
  the slower the operation of lookups.
  The other args control the 
  initial size and under what conditions
  the table is rehashed.
  The access function is GETHASH, and is
  used for lookups like so:
  (gethash <key> <table> &optional <default>).
  The function returns two values: the value
  associated with the key and either T or 
  NIL which inform about the presence of 
  the key. If the key is not found, 
  the first value will be the default, if 
  supplied, or NIL if not.
  As typical for CL, the setter is 
  a gethash wrapped in a setf.
  E.g. (setf (gethash 12 my-table) 'joe)
  will associate the value 'joe with 
  the key 12 in my-table. There are several
  other provided functions, including 
  maphash, which maps over the entries. Two
  other data structures have associative 
  properties in CL: the association list
  and the property list. Both are built
  on single linked lists, and thus,
  access is O(n) rather than O(1). Nevertheless,
  alists offer some advantages over 
  hash-tables.
  (1). They are more efficient then
       hash tables when there are 10 or 
       fewer entries.
  (2). They can be ordered.
  (3). They can contain an arbitrary number
       of entries with the same key. This
       can be useful for temporarily 
       shadowing an entry.
  (4). Being built on lisps, they take
       advantage of the plethora of nattve
       list and sequence functions.
  A few disadvantages of native CL 
  hash-tables: 1. There is no built-in
  literal or displayable form. 2. There
  are no native functions for common
  manipulations such as listing the keys 
  or values. These and other disadvantages
  are ameliorated by the ubiquitous 
  third-party utility libraries
  alexandria and serapeum." (defparameter ros-01::*my-hash*) (#2# . 3290) ros-01::inconsummate-numbers (defun ros-01::inconsummate-numbers) (#2# . 5848) ros-01::index <= ros-01::inner ros-01::len log ceiling max expt t "~&~D: ~D" format >= "~&~D: ~D" #:g328 si::%dolist-var ros-01::digits iterate::sum "~D" char< sort "~{~D~}" string= #Y(ros-01::inconsummate-numbers nil nil (26 57 102 60 294 8 1 45 105 75 45 73 57 21 61 2 6 275 8 0 51 1 13 1 9 1 19 2 22 51 1 13 2 9 1000 19 2 106 76 39 4 35 0 1 57 107 60 242 75 45 108 57 21 61 1 26 9 1 13 4 9 10 19 2 109 12 19 1 110 12 19 2 111 12 9 1 19 2 23 51 1 13 1 9 1 19 2 22 51 1 9 9 13 4 13 1 19 3 75 12 9 10 10 1 16 18 17 112 12 19 2 24 39 64 13 5 9 50 19 2 106 39 12 14 113 15 114 13 5 13 4 19 4 115 13 5 9 1000 19 2 116 39 16 14 113 15 117 13 5 13 4 19 4 115 75 73 36 6 8 1 45 118 13 6 13 0 19 2 22 51 6 43 1 75 73 36 2 9 10 19 1 77 12 13 1 19 2 37 45 119 57 21 61 2 5 77 35 0 1 10 1 4 45 120 33 22 12 13 0 19 2 78 45 121 13 0 9 0 19 2 34 39 35 77 15 122 13 8 13 0 19 2 75 12 19 3 115 12 33 123 12 19 2 124 12 77 15 125 13 1 19 3 115 12 19 2 126 39 5 75 73 36 6 43 1 10 2 5 51 2 43 1 10 1 39 4 35 0 0 62 43 1 35 0 0 62 43 1 63 35 0 0 62 75 73 43 2 63 29) #1# #2# 5848) ros-01::loops-rec (defun ros-01::loops-rec) (#2# . 8131) random print #Y(ros-01::loops-rec nil nil (26 9 20 19 1 131 45 73 13 0 19 1 132 13 0 9 10 19 2 48 76 73 39 4 19 0 128 43 1 29) #1# #2# 8131) ros-01::loops-do (defun ros-01::loops-do) (#2# . 9108) #Y(ros-01::loops-do nil nil (26 9 20 19 1 131 12 19 1 132 45 73 38 13 9 20 19 1 131 12 19 1 132 12 53 0 13 0 9 10 19 2 48 39 -20 75 73 43 1 29) #1# #2# 9108) ros-01::loops-loop (defun ros-01::loops-loop) (#2# . 9295) #Y(ros-01::loops-loop nil nil (26 58 60 42 75 45 73 57 21 61 2 2 28 9 20 19 1 131 12 19 1 132 51 1 13 1 9 10 19 2 48 39 5 75 73 36 2 35 0 0 62 73 43 1 63 29) #1# #2# 9295) ros-01::loops-iter (defun ros-01::loops-iter) (#2# . 9620) #Y(ros-01::loops-iter nil nil (26 75 45 73 58 60 37 57 21 61 1 1 9 20 19 1 131 12 19 1 132 51 2 13 2 9 10 19 2 48 39 5 75 73 36 1 35 0 0 62 75 73 63 43 1 29) #1# #2# 9620) ros-01::*data* ".........00000.........
......00003130000......
....000321322221000....
...00231222432132200...
..0041433223233211100..
..0232231612142618530..
.003152122326114121200.
.031252235216111132210.
.022211246332311115210.
00113232262121317213200
03152118212313211411110
03231234121132221411410
03513213411311414112320
00427534125412213211400
.013322444412122123210.
.015132331312411123120.
.003333612214233913300.
..0219126511415312570..
..0021321524341325100..
...00211415413523200...
....000122111322000....
......00001120000......
.........00000........." (defparameter ros-01::*data*) (#2# . 10226) ros-01::data->rows (defun ros-01::data->rows) (#2# . 12840) (ros-01::data) ros-01::data :separator #\Newline uiop/utility::split-string #Y(ros-01::data->rows nil nil (24 45 154 26 13 0 14 155 1 156 6 1 12 19 3 157 29) #1# #2# 12840) "Separates the data, a string, 
  into a list of strings, where each string 
  is a row." ros-01::rows->array (defun ros-01::rows->array) (#2# . 13068) (ros-01::rows) ros-01::rows array #:list20 ros-01::row #:sequence23 #:limit24 ros-01::c #:index22 char digit-char-p char-code #\0 #Y(ros-01::rows->array nil nil (24 45 164 26 10 0 16 17 12 10 0 4 16 17 6 2 12 19 1 59 45 165 75 45 20 75 45 166 75 45 167 58 60 172 57 21 61 2 10 157 8 -1 51 4 10 6 51 3 13 4 9 1 19 2 22 51 4 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 75 45 31 75 45 168 75 45 169 75 45 170 75 45 171 57 21 61 2 20 95 8 -1 51 5 10 8 51 4 10 4 16 17 51 3 8 -1 51 1 13 5 9 1 19 2 22 51 5 13 1 9 1 19 2 22 51 1 13 1 13 3 19 2 116 39 4 35 0 1 13 4 10 1 17 172 51 2 13 11 13 10 13 5 13 2 19 1 173 39 16 10 2 16 174 12 1 175 16 174 12 19 2 23 38 4 10 2 73 12 19 4 30 35 0 0 62 43 5 35 0 0 10 5 73 36 1 62 75 73 63 43 4 29) #1# #2# 13068) "Creates a 2d array from a list of 
  rows of strings. Digit characters are
  coerced to integers. Other characters
  are unchanged." ros-01::array->vertex-dict (defun ros-01::array->vertex-dict) (#2# . 13634) (array) array-dimensions #:g353 #:g354 si::dm-too-few-arguments ros-01::nrows ros-01::ncols si::dm-too-many-arguments serapeum::dict ros-01::table #:limit30 #:limit32 ros-01::neighbors ros-01::val numberp ros-01::coords second #Y(nil nil nil (24 45 196 26 9 -1 10 0 4 12 13 12 19 3 24 73 39 32 9 -1 10 0 16 197 12 13 11 19 3 24 73 39 17 13 15 10 0 4 12 10 0 16 197 12 19 3 25 16 195 29) #1# #2# 13634) remove-if-not :value :neighbors si::hash-set #Y(ros-01::array->vertex-dict nil nil (24 45 165 26 10 0 16 182 45 183 10 0 45 184 10 0 76 39 6 13 1 19 1 185 10 0 4 12 10 0 5 51 0 22 45 186 10 1 76 39 6 13 2 19 1 185 10 1 4 12 10 1 5 51 1 22 45 187 10 2 39 6 13 3 19 1 188 33 91 12 19 1 189 45 190 75 45 20 75 45 191 58 60 287 57 21 61 2 10 272 10 6 51 2 8 -1 51 3 13 3 9 1 19 2 22 51 3 13 3 13 2 19 2 116 39 4 35 0 1 75 45 31 75 45 192 57 21 61 2 10 225 10 8 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 13 12 13 6 13 2 19 3 25 12 77 46 193 46 194 10 0 16 195 39 8 13 0 9 0 19 2 34 39 133 34 198 12 13 8 13 4 13 0 19 2 22 6 2 12 13 8 13 4 13 0 19 2 23 6 2 12 13 8 13 0 19 2 22 12 10 4 6 2 12 13 8 13 0 19 2 23 12 10 4 6 2 12 13 8 13 0 19 2 22 12 13 4 13 0 19 2 22 6 2 12 13 8 13 0 19 2 23 12 13 4 13 0 19 2 23 6 2 12 13 8 13 0 19 2 22 12 13 4 13 0 19 2 23 6 2 12 13 8 13 0 19 2 23 12 13 4 13 0 19 2 22 6 2 6 8 12 19 2 199 51 1 13 8 10 4 6 2 12 13 9 14 200 10 0 7 2 12 14 201 10 1 7 2 6 2 12 19 3 202 43 2 35 0 0 62 43 2 35 0 0 10 4 73 36 1 62 75 73 63 43 2 43 1 43 4 29) #1# #2# 13634) "Creates a vertex dictionary from 
  the array. See *vertex-dict* and the
  task description for futher details." ros-01::*graph* "An array of the data, with numerical
  characters coerced to integers." (defparameter ros-01::*graph*) (#2# . 15213) ros-01::*vertex-dict* "A hash table, where keys 
  are coordinate lists from the graph,
  and values are association lists
  with :value keyed to the item found
  at the coordinate in the graph and
  :neighbors to a list of valid coordinate 
  lists corresponding to cells of the
  array that contain numbers. Note that
  this is a directed graph, since 
  a cell containing a zero is a destination
  with no edges, whereas cells containing
  other integers may have one or more 
  edges which link to a 0." (defparameter ros-01::*vertex-dict*) (#2# . 15351) ros-01::init-distance-dict (defun ros-01::init-distance-dict) (#2# . 15900) (ros-01::vertices ros-01::start) ros-01::vertices ros-01::start ros-01::_ :distance ros-01::+infinity+ :path #Y(nil nil nil (24 45 42 24 45 219 26 13 1 14 220 11 221 7 2 12 14 222 75 7 2 6 2 12 72 2 29) #1# #2# 15900) serapeum::maphash-new ros-01::distances #Y(ros-01::init-distance-dict nil nil (24 45 217 24 45 218 26 1 223 12 13 1 14 90 33 91 12 19 4 224 45 225 13 1 13 0 14 220 8 0 7 2 12 14 222 10 1 6 1 7 2 6 2 12 19 3 202 10 0 73 43 1 29) #1# #2# 15900) "Given a hash table of vertices and a starting
  coordinate pair (list), return a 
  new hash table with the same keys and 
  alists for the values. Each alist has
  entries :distance (set to 0 for start
  and infinity everywhere else) and :path
  (set to a list containing start for start
   and nil everywhere else)" ros-01::distance (defun ros-01::distance) (#2# . 16717) (ros-01::node ros-01::distances) ros-01::node gethash assoc #Y(ros-01::distance nil nil (24 45 232 24 45 225 26 14 220 13 1 13 0 19 2 233 12 19 2 234 5 73 29) #1# #2# 16717) ros-01::%set-distance (defun ros-01::%set-distance) (#2# . 16814) (ros-01::node ros-01::distances ros-01::distance) #Y(ros-01::%set-distance nil nil (24 45 232 24 45 225 24 45 228 26 14 220 13 2 13 1 19 2 233 12 19 2 234 12 10 0 17 64 29) #1# #2# 16814) (defsetf ros-01::distance) (#2# . 16941) si::do-defsetf ros-01::path (defun ros-01::path) (#2# . 16975) (ros-01::node ros-01::distances) #Y(ros-01::path nil nil (24 45 232 24 45 225 26 14 222 13 1 13 0 19 2 233 12 19 2 234 5 73 29) #1# #2# 16975) ros-01::%set-path (defun ros-01::%set-path) (#2# . 17080) (ros-01::node ros-01::distances ros-01::path) #Y(ros-01::%set-path nil nil (24 45 232 24 45 225 24 45 244 26 14 222 13 2 13 1 19 2 233 12 19 2 234 12 10 0 17 64 29) #1# #2# 17080) (defsetf ros-01::path) (#2# . 17191) ros-01::value (defun ros-01::value) (#2# . 17222) (ros-01::node ros-01::vertices) #Y(ros-01::value nil nil (24 45 232 24 45 217 26 14 200 13 1 13 0 19 2 233 12 19 2 234 5 73 29) #1# #2# 17222) (defun ros-01::neighbors) (#2# . 17310) (ros-01::node ros-01::vertices) #Y(ros-01::neighbors nil nil (24 45 232 24 45 217 26 14 201 13 1 13 0 19 2 233 12 19 2 234 5 73 29) #1# #2# 17310) ros-01::shortest-paths-to-safety (defun ros-01::shortest-paths-to-safety) (#2# . 17404) (ros-01::start &optional (ros-01::graph ros-01::*graph*) (ros-01::vertices ros-01::*vertex-dict*)) ros-01::graph alexandria::hash-table-keys ros-01::not-seen serapeum::queue ros-01::node-queue ros-01::path-list serapeum::queue-empty-p serapeum::deq ros-01::cur ros-01::neighbor member append serapeum::enq remove :key cdr #Y(ros-01::shortest-paths-to-safety nil nil (24 45 218 25 40 3 14 205 46 269 25 40 3 14 209 46 217 26 13 0 19 1 270 45 271 13 1 13 3 19 2 213 45 225 13 4 19 1 272 45 273 75 45 274 58 60 227 57 21 61 2 2 202 13 3 19 1 275 39 4 35 0 1 13 3 19 1 276 45 277 13 0 13 7 19 2 256 16 47 39 30 13 0 13 5 19 2 244 12 13 0 13 5 19 2 244 16 17 16 18 7 2 12 10 3 3 51 3 38 126 13 0 13 7 19 2 193 45 119 57 21 61 2 5 101 35 0 1 10 1 4 45 278 13 0 13 9 14 90 33 91 12 19 4 279 39 72 13 3 13 8 19 2 228 16 33 12 13 0 13 8 19 2 228 12 19 2 24 39 49 13 0 13 8 13 3 13 8 19 2 228 16 33 12 19 3 236 13 0 13 8 13 3 13 8 19 2 244 12 10 0 6 1 12 19 2 280 12 19 3 249 13 0 13 7 19 2 281 10 2 5 51 2 43 1 10 1 39 4 35 0 0 62 43 1 13 0 13 6 14 90 33 91 12 19 4 282 51 6 43 1 35 0 0 13 2 33 24 12 14 283 33 284 12 19 4 124 36 1 62 75 73 63 43 4 29) #1# #2# 17404) "Given a starting coordinate (list)
  and optional graph (array, defaulting to
  *graph*) and vertices (hash table, 
  defaulting to *vertices), return a 
  list of the shortest paths to 
  a cell having a 0 value." ros-01::shortest-of-short (defun ros-01::shortest-of-short) (#2# . 19050) (ros-01::paths-to-safety) ros-01::paths-to-safety ros-01::entry cdar #Y(nil nil nil (24 45 292 26 10 0 5 12 10 1 16 293 17 91 29) #1# #2# 19050) #Y(ros-01::shortest-of-short nil nil (24 45 291 26 34 294 12 13 0 19 2 199 29) #1# #2# 19050) "Given an alist with paths as keys and
  lengths as values, and 
  sorted by increasing path length, strip the 
  table of 
  any entries that do not tie for shortest." ros-01::init-floyd-warshaw-array (defun ros-01::init-floyd-warshaw-array) (#2# . 19377) (&optional (ros-01::graph ros-01::*graph*) (ros-01::vertices ros-01::*vertex-dict*)) #:temp41 ros-01::fw-array #:limit42 #:limit44 cadr #Y(ros-01::init-floyd-warshaw-array nil nil (25 40 3 14 205 46 269 25 40 3 14 209 46 217 26 10 1 16 182 45 301 10 0 4 45 186 10 1 5 4 45 187 13 1 13 0 13 1 10 0 6 4 12 14 58 14 221 19 3 59 45 302 75 45 20 75 45 303 58 60 175 57 21 61 2 10 160 10 6 51 2 8 -1 51 3 13 3 9 1 19 2 22 51 3 13 3 13 2 19 2 116 39 4 35 0 1 75 45 31 75 45 304 57 21 61 2 10 113 10 8 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 13 7 13 6 13 2 13 6 13 2 9 0 19 6 30 13 6 10 2 6 2 12 13 11 19 2 193 45 119 57 21 61 2 5 36 35 0 1 10 1 4 45 278 13 10 13 9 13 5 10 0 4 12 10 0 16 305 12 9 1 19 6 30 10 2 5 51 2 43 1 10 1 39 4 35 0 0 62 43 1 35 0 0 62 43 2 35 0 0 10 4 73 36 1 62 75 73 63 43 6 29) #1# #2# 19377) ros-01::floyd-warshaw (defun ros-01::floyd-warshaw) (#2# . 20122) (&optional (ros-01::graph ros-01::*graph*) (ros-01::vertices ros-01::*vertex-dict*)) ros-01::fw #:temp59 ros-01::inter-row #:limit60 ros-01::inter-col #:limit62 ros-01::start-row #:limit64 ros-01::start-col #:limit66 ros-01::end-row #:limit68 ros-01::end-col #:limit70 min #Y(ros-01::floyd-warshaw nil nil (25 40 3 14 205 46 269 25 40 3 14 209 46 217 26 13 1 13 0 19 2 297 45 311 10 2 16 182 45 312 10 0 4 45 186 10 1 5 4 45 187 75 45 313 75 45 314 58 60 346 57 21 61 2 10 331 10 5 51 2 8 -1 51 3 13 3 9 1 19 2 22 51 3 13 3 13 2 19 2 116 39 4 35 0 1 75 45 315 75 45 316 57 21 61 2 10 284 10 7 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 75 45 317 75 45 318 57 21 61 2 10 237 10 11 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 75 45 319 75 45 320 57 21 61 2 10 190 10 13 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 75 45 321 75 45 322 57 21 61 2 10 143 10 17 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 75 45 323 75 45 324 57 21 61 2 10 96 10 19 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 13 22 13 11 13 8 13 5 13 2 13 22 13 11 13 8 13 5 13 2 19 5 25 12 13 22 13 11 13 8 13 18 13 14 19 5 25 12 13 22 13 18 13 14 13 5 13 2 19 5 25 12 19 2 22 12 19 2 325 12 19 6 30 35 0 0 62 43 2 35 0 0 62 43 2 35 0 0 62 43 2 35 0 0 62 43 2 35 0 0 62 43 2 35 0 0 10 7 73 36 1 62 75 73 63 43 6 29) #1# #2# 20122) "Given a graph (array) and a hash table
  containing information about each 
  vertex, return an array that lists
  the shortest paths from every vertex
  to every other vertex." ros-01::find-path (defun ros-01::find-path) (#2# . 21245) (ros-01::source ros-01::destination array &optional (ros-01::vertices ros-01::*vertex-dict*)) ros-01::source ros-01::destination ros-01::dcol ros-01::drow ros-01::scol ros-01::srow #Y(nil nil nil (24 45 278 26 13 9 10 0 6 2 73 29) #1# #2# 21245) ros-01::search-queue ros-01::cur-path ros-01::next-node last copy-list #Y(ros-01::find-path nil nil (24 45 332 24 45 333 24 45 165 25 40 3 14 209 46 217 26 57 328 60 209 10 4 4 12 10 4 16 305 12 10 3 4 12 10 3 16 305 12 46 334 46 335 46 336 46 337 13 6 13 0 13 1 13 2 13 3 19 5 25 12 14 221 19 2 24 73 39 158 33 272 12 34 338 12 13 8 13 5 19 2 193 12 19 2 50 12 19 2 78 45 339 75 45 340 75 45 341 57 21 61 2 2 116 13 3 19 1 275 39 4 35 0 1 13 3 19 1 276 51 2 13 2 19 1 342 4 51 1 13 1 10 11 17 91 39 6 10 2 73 36 8 13 1 13 9 19 2 193 45 119 57 21 61 2 5 50 35 0 1 10 1 4 45 278 13 0 13 5 14 90 33 91 12 19 4 279 76 39 20 10 5 16 343 12 10 0 6 1 12 19 2 280 12 13 6 19 2 281 10 2 5 51 2 43 1 10 1 39 4 35 0 0 62 43 1 35 0 0 62 75 73 43 2 43 1 43 4 63 29) #1# #2# 21245) ros-01::longest-shortest-path (defun ros-01::longest-shortest-path) (#2# . 22381) (ros-01::fw) ros-01::longest #:temp82 ros-01::source-row #:limit83 ros-01::source-col #:limit85 ros-01::dest-row #:limit87 ros-01::dest-col #:limit89 ros-01::cur-length #Y(ros-01::longest-shortest-path nil nil (24 45 311 26 75 45 332 75 45 333 8 -1 45 349 10 3 16 182 45 350 10 0 4 45 186 10 1 5 4 45 187 75 45 351 75 45 352 58 60 249 57 21 61 2 10 229 10 5 51 2 8 -1 51 3 13 3 9 1 19 2 22 51 3 13 3 13 2 19 2 116 39 4 35 0 1 75 45 353 75 45 354 57 21 61 2 10 182 10 7 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 75 45 355 75 45 356 57 21 61 2 10 135 10 11 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 75 45 357 75 45 358 57 21 61 2 10 88 10 13 51 1 8 -1 51 2 13 2 9 1 19 2 22 51 2 13 2 13 1 19 2 116 39 4 35 0 1 13 19 13 12 13 8 13 5 13 2 19 5 25 45 359 13 0 14 221 19 2 24 39 8 13 0 13 17 19 2 34 39 21 13 13 10 9 6 2 51 19 13 6 10 3 6 2 51 18 10 0 51 17 43 1 35 0 0 62 43 2 35 0 0 62 43 2 35 0 0 62 43 2 35 0 0 13 7 13 9 13 8 72 3 36 1 62 75 73 63 43 8 29) #1# #2# 22381) ros-01::im-an-engineer-primary (defun ros-01::im-an-engineer-primary) (#2# . 23277) "~&~&The shortest paths to safety are ~%~
          ~A" (11 11) "~&~&The shortest path from (21 11) to (1 11) ~%~
      is ~D days long. One path is ~%~
      ~A ~%~
      The shortest path from (1 11) to (21 11) ~%~
      is ~D days long. One path is ~%~
      ~A" (21 11) (1 11) (1 11) (21 11) ros-01::dest ros-01::dist "~&~&Besides the unconnected nodes, ~%~
        the longest shortest path takes ~D days. ~%~
        One example is the path between ~%~
        ~A and ~A" #Y(ros-01::im-an-engineer-primary nil nil (26 14 113 15 364 15 365 19 1 265 12 19 1 287 12 19 3 115 19 0 307 45 311 14 113 15 366 13 0 9 21 9 11 9 1 9 11 19 5 25 12 15 367 15 368 13 0 19 3 328 12 13 0 9 1 9 11 9 21 9 11 19 5 25 12 15 369 15 370 13 0 19 3 328 12 19 6 115 13 0 19 1 345 47 2 371 47 1 332 45 372 14 113 15 373 13 0 13 1 13 2 19 5 115 43 3 43 1 29) #1# #2# 23277) ros-01::oid->int-list (defun ros-01::oid->int-list) (#2# . 24184) (ros-01::oid) ros-01::oid parse-integer "." #Y(ros-01::oid->int-list nil nil (24 45 379 26 33 380 12 13 0 14 155 15 381 19 3 157 12 19 2 50 29) #1# #2# 24184) ros-01::oid< (defun ros-01::oid<) (#2# . 27547) (ros-01::oid1 ros-01::oid2) ros-01::oid1 ros-01::oid2 ros-01::lst2 ros-01::lst1 ros-01::rest1 ros-01::rest2 #Y(ros-01::rec nil nil (24 45 391 24 45 392 26 10 0 76 39 5 75 73 38 58 10 1 76 39 6 11 113 73 38 48 10 1 4 12 10 0 4 12 19 2 24 39 6 11 113 73 38 30 10 1 4 12 10 0 4 12 19 2 34 39 5 75 73 38 13 10 1 5 12 10 0 5 12 32 2 18 2 29) #1# #2# 27547) #Y(ros-01::oid< nil nil (24 45 387 24 45 388 26 13 1 19 1 375 12 13 0 19 1 375 12 46 389 46 390 31 1 393 13 1 13 2 32 0 18 2 43 1 43 2 29) #1# #2# 27547) ros-01::sort-oid (defun ros-01::sort-oid) (#2# . 28089) (ros-01::oid-list) ros-01::oid-list #Y(ros-01::sort-oid nil nil (24 45 399 26 13 0 33 383 12 19 2 124 29) #1# #2# 28089) ros-01::*oid-test-case* "1.3.6.1.4.1.11.2.17.19.3.4.0.10" "1.3.6.1.4.1.11.2.17.5.2.0.79" "1.3.6.1.4.1.11.2.17.19.3.4.0.4" "1.3.6.1.4.1.11150.3.4.0.1" "1.3.6.1.4.1.11.2.17.19.3.4.0.1" "1.3.6.1.4.1.11150.3.4.0" (defparameter ros-01::*oid-test-case*) (#2# . 28168) ros-01::oid-main (defun ros-01::oid-main) (#2# . 28438) #Y(ros-01::oid-main nil nil (26 14 401 19 1 395 29) #1# #2# 28438) ros-01::next-juggler (defun ros-01::next-juggler) (#2# . 28523) (ros-01::n) evenp isqrt #Y(ros-01::next-juggler nil nil (24 45 73 26 10 0 16 418 39 7 10 0 16 419 38 12 13 0 13 0 13 0 19 3 75 16 419 29) #1# #2# 28523) ros-01::juggler-stats (defun ros-01::juggler-stats) (#2# . 30500) (ros-01::n) ros-01::h ros-01::l ros-01::jug #Y(ros-01::juggler-stats nil nil (24 45 73 26 8 -1 45 425 8 -1 45 20 75 45 426 75 45 427 58 60 73 57 21 61 1 9 8 0 51 3 10 6 51 2 13 3 9 1 19 2 22 51 3 13 2 9 1 19 2 48 39 11 13 3 13 5 13 4 72 3 36 1 13 2 13 5 19 2 34 39 9 10 2 51 5 10 3 51 4 13 2 19 1 414 51 2 35 0 0 62 75 73 63 43 4 29) #1# #2# 30500) ros-01::juggler-main (defun ros-01::juggler-main) (#2# . 30924) "~&Number, terms to 1, max, terms to max.~%" "~%~D ~D ~D ~D" "~&~%Number, terms to 1, number of digits in max,~%~
               terms to max.~%" #:list97 (113 173 193 2183 11229 15065 15845 30817 48443 275485 1267909 2264915 5812827 7110201) "~%~D ~D ~D ~D" #Y(ros-01::juggler-main nil nil (26 14 113 15 432 19 2 115 75 45 73 57 21 61 2 6 59 8 19 51 1 13 1 9 1 19 2 22 51 1 13 1 9 39 19 2 34 39 4 35 0 1 13 1 19 1 421 47 2 20 47 1 425 45 426 14 113 15 433 13 4 13 0 13 1 13 2 19 6 115 43 3 35 0 0 62 43 1 14 113 15 434 19 2 115 75 45 435 75 45 73 57 21 61 2 6 66 1 436 51 2 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 19 1 421 47 2 20 47 1 425 45 426 14 113 15 437 13 4 13 0 13 1 9 10 19 2 109 12 19 1 110 12 13 2 19 6 115 43 3 35 0 0 62 75 73 43 2 29) #1# #2# 30924) ros-01::list-empties (defun ros-01::list-empties) (#2# . 31537) (ros-01::board-tableau) ros-01::board-tableau ros-01::empties si::%dotimes-var ros-01::col #Y(ros-01::list-empties nil nil (24 45 443 26 77 9 0 46 167 46 444 38 59 8 4 45 445 8 0 45 446 38 31 13 4 13 3 13 0 19 3 25 76 39 13 13 3 10 0 6 2 12 10 2 3 51 2 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -38 43 2 10 1 16 33 12 53 1 13 1 9 3 19 2 34 39 -66 10 0 73 43 2 29) #1# #2# 31537) ros-01::add-random (defun ros-01::add-random) (#2# . 34450) (ros-01::board-tableau) alexandria::random-elt ros-01::choice ros-01::addition #Y(ros-01::add-random nil nil (24 45 443 26 9 100 19 1 131 12 9 89 19 2 34 39 6 8 4 73 38 4 8 2 73 12 13 0 19 1 439 12 19 1 452 12 46 453 46 454 13 2 10 1 4 12 10 1 16 305 12 13 0 19 4 30 43 2 10 0 73 29) #1# #2# 34450) ros-01::2048-board (defclass ros-01::2048-board) (#2# . 34770) :initfunction #3=(4 4) #Y(nil nil nil (26 15 460 14 58 77 19 3 59 12 19 1 448 12 19 1 448 29) #1# #2# 34770) (:type array :initform (ros-01::add-random (ros-01::add-random (make-array (quote #3#) :initial-element nil))) :writers ((setf ros-01::tab)) :readers (ros-01::tab) :initargs (:tab) :name ros-01::tableau) clos::load-defclass print-object (defmethod print-object (ros-01::obj ros-01::2048-board) stream) (#2# . 34981) (ros-01::2048-board t) (ros-01::obj stream) ros-01::obj stream ros-01::tab ros-01::tableau "~4A " #\_ terpri #Y(print-object nil nil (24 45 469 24 45 470 26 13 1 19 1 471 45 472 8 4 45 445 8 0 45 167 38 85 8 4 45 445 8 0 45 446 38 53 13 5 15 473 13 4 13 2 13 0 19 3 25 45 292 13 5 13 3 13 1 19 3 25 45 292 10 0 39 6 10 0 73 38 4 1 474 73 12 43 1 43 1 19 3 115 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -60 43 2 13 3 19 1 475 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -92 0 43 2 43 1 29) #1# #2# 34981) clos::install-method ros-01::shift-up (defun ros-01::shift-up) (#2# . 35312) (ros-01::board) ros-01::board ros-01::movep #Y(ros-01::shift-up nil nil (24 45 482 26 13 0 19 1 471 12 77 46 483 46 472 8 4 45 445 8 0 45 446 38 313 13 2 9 0 13 0 19 3 25 76 39 137 13 2 9 1 13 0 19 3 25 39 36 13 2 9 0 13 0 13 2 9 1 13 0 19 3 25 12 19 4 30 13 2 9 1 13 0 77 19 4 30 11 113 51 3 38 91 13 2 9 2 13 0 19 3 25 39 36 13 2 9 0 13 0 13 2 9 2 13 0 19 3 25 12 19 4 30 13 2 9 2 13 0 77 19 4 30 11 113 51 3 38 45 13 2 9 3 13 0 19 3 25 39 34 13 2 9 0 13 0 13 2 9 3 13 0 19 3 25 12 19 4 30 13 2 9 3 13 0 77 19 4 30 11 113 51 3 13 2 9 1 13 0 19 3 25 76 39 91 13 2 9 2 13 0 19 3 25 39 36 13 2 9 1 13 0 13 2 9 2 13 0 19 3 25 12 19 4 30 13 2 9 2 13 0 77 19 4 30 11 113 51 3 38 45 13 2 9 3 13 0 19 3 25 39 34 13 2 9 1 13 0 13 2 9 3 13 0 19 3 25 12 19 4 30 13 2 9 3 13 0 77 19 4 30 11 113 51 3 13 2 9 2 13 0 19 3 25 76 39 45 13 2 9 3 13 0 19 3 25 39 34 13 2 9 2 13 0 13 2 9 3 13 0 19 3 25 12 19 4 30 13 2 9 3 13 0 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -320 13 4 13 3 72 2 43 2 43 2 29) #1# #2# 35312) ros-01::shift-down (defun ros-01::shift-down) (#2# . 36783) (ros-01::board) #Y(ros-01::shift-down nil nil (24 45 482 26 13 0 19 1 471 12 77 46 483 46 472 8 4 45 445 8 0 45 446 38 313 13 2 9 3 13 0 19 3 25 76 39 137 13 2 9 2 13 0 19 3 25 39 36 13 2 9 3 13 0 13 2 9 2 13 0 19 3 25 12 19 4 30 13 2 9 2 13 0 77 19 4 30 11 113 51 3 38 91 13 2 9 1 13 0 19 3 25 39 36 13 2 9 3 13 0 13 2 9 1 13 0 19 3 25 12 19 4 30 13 2 9 1 13 0 77 19 4 30 11 113 51 3 38 45 13 2 9 0 13 0 19 3 25 39 34 13 2 9 3 13 0 13 2 9 0 13 0 19 3 25 12 19 4 30 13 2 9 0 13 0 77 19 4 30 11 113 51 3 13 2 9 2 13 0 19 3 25 76 39 91 13 2 9 1 13 0 19 3 25 39 36 13 2 9 2 13 0 13 2 9 1 13 0 19 3 25 12 19 4 30 13 2 9 1 13 0 77 19 4 30 11 113 51 3 38 45 13 2 9 0 13 0 19 3 25 39 34 13 2 9 2 13 0 13 2 9 0 13 0 19 3 25 12 19 4 30 13 2 9 0 13 0 77 19 4 30 11 113 51 3 13 2 9 1 13 0 19 3 25 76 39 45 13 2 9 0 13 0 19 3 25 39 34 13 2 9 1 13 0 13 2 9 0 13 0 19 3 25 12 19 4 30 13 2 9 0 13 0 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -320 13 4 13 3 72 2 43 2 43 2 29) #1# #2# 36783) ros-01::shift-left (defun ros-01::shift-left) (#2# . 38272) (ros-01::board) #Y(ros-01::shift-left nil nil (24 45 482 26 13 0 19 1 471 12 77 46 483 46 472 8 4 45 445 8 0 45 167 38 313 13 2 13 0 9 0 19 3 25 76 39 137 13 2 13 0 9 1 19 3 25 39 36 13 2 13 0 9 0 13 2 13 0 9 1 19 3 25 12 19 4 30 13 2 13 0 9 1 77 19 4 30 11 113 51 3 38 91 13 2 13 0 9 2 19 3 25 39 36 13 2 13 0 9 0 13 2 13 0 9 2 19 3 25 12 19 4 30 13 2 13 0 9 2 77 19 4 30 11 113 51 3 38 45 13 2 13 0 9 3 19 3 25 39 34 13 2 13 0 9 0 13 2 13 0 9 3 19 3 25 12 19 4 30 13 2 13 0 9 3 77 19 4 30 11 113 51 3 13 2 13 0 9 1 19 3 25 76 39 91 13 2 13 0 9 2 19 3 25 39 36 13 2 13 0 9 1 13 2 13 0 9 2 19 3 25 12 19 4 30 13 2 13 0 9 2 77 19 4 30 11 113 51 3 38 45 13 2 13 0 9 3 19 3 25 39 34 13 2 13 0 9 1 13 2 13 0 9 3 19 3 25 12 19 4 30 13 2 13 0 9 3 77 19 4 30 11 113 51 3 13 2 13 0 9 2 19 3 25 76 39 45 13 2 13 0 9 3 19 3 25 39 34 13 2 13 0 9 2 13 2 13 0 9 3 19 3 25 12 19 4 30 13 2 13 0 9 3 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -320 13 4 13 3 72 2 43 2 43 2 29) #1# #2# 38272) ros-01::shift-right (defun ros-01::shift-right) (#2# . 39777) (ros-01::board) #Y(ros-01::shift-right nil nil (24 45 482 26 13 0 19 1 471 12 77 46 483 46 472 8 4 45 445 8 0 45 167 38 313 13 2 13 0 9 3 19 3 25 76 39 137 13 2 13 0 9 2 19 3 25 39 36 13 2 13 0 9 3 13 2 13 0 9 2 19 3 25 12 19 4 30 13 2 13 0 9 2 77 19 4 30 11 113 51 3 38 91 13 2 13 0 9 1 19 3 25 39 36 13 2 13 0 9 3 13 2 13 0 9 1 19 3 25 12 19 4 30 13 2 13 0 9 1 77 19 4 30 11 113 51 3 38 45 13 2 13 0 9 0 19 3 25 39 34 13 2 13 0 9 3 13 2 13 0 9 0 19 3 25 12 19 4 30 13 2 13 0 9 0 77 19 4 30 11 113 51 3 13 2 13 0 9 2 19 3 25 76 39 91 13 2 13 0 9 1 19 3 25 39 36 13 2 13 0 9 2 13 2 13 0 9 1 19 3 25 12 19 4 30 13 2 13 0 9 1 77 19 4 30 11 113 51 3 38 45 13 2 13 0 9 0 19 3 25 39 34 13 2 13 0 9 2 13 2 13 0 9 0 19 3 25 12 19 4 30 13 2 13 0 9 0 77 19 4 30 11 113 51 3 13 2 13 0 9 1 19 3 25 76 39 45 13 2 13 0 9 0 19 3 25 39 34 13 2 13 0 9 1 13 2 13 0 9 0 19 3 25 12 19 4 30 13 2 13 0 9 0 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -320 10 4 73 43 2 43 2 29) #1# #2# 39777) ros-01::combine-up (defun ros-01::combine-up) (#2# . 41268) (ros-01::board) ros-01::combinedp eq #Y(ros-01::combine-up nil nil (24 45 482 26 13 0 19 1 471 12 77 46 504 46 472 8 4 45 445 8 0 45 446 38 356 13 2 9 0 13 0 19 3 25 39 339 13 2 9 0 13 0 19 3 25 12 13 2 9 1 13 0 19 3 25 17 12 39 149 13 2 9 0 13 0 9 2 13 2 9 0 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 1 13 0 13 2 9 2 13 0 19 3 25 12 19 4 30 13 2 9 2 13 0 13 2 9 3 13 0 19 3 25 12 19 4 30 13 2 9 3 13 0 77 19 4 30 11 113 51 3 13 2 9 1 13 0 19 3 25 39 22 13 2 9 1 13 0 19 3 25 12 13 2 9 2 13 0 19 3 25 17 12 39 36 13 2 9 1 13 0 9 2 13 2 9 1 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 2 13 0 77 19 4 30 38 168 13 2 9 1 13 0 19 3 25 39 22 13 2 9 1 13 0 19 3 25 12 13 2 9 2 13 0 19 3 25 17 505 39 61 13 2 9 1 13 0 9 2 13 2 9 1 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 2 13 0 13 2 9 3 13 0 19 3 25 12 19 4 30 13 2 9 3 13 0 77 19 4 30 11 113 51 3 38 74 13 2 9 2 13 0 19 3 25 39 22 13 2 9 2 13 0 19 3 25 12 13 2 9 3 13 0 19 3 25 17 505 39 40 13 2 9 2 13 0 9 2 13 2 9 2 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 3 13 0 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -363 13 4 13 3 72 2 43 2 43 2 29) #1# #2# 41268) ros-01::combine-down (defun ros-01::combine-down) (#2# . 42814) (ros-01::board) #Y(ros-01::combine-down nil nil (24 45 482 26 13 0 19 1 471 12 77 46 504 46 472 8 4 45 445 8 0 45 446 38 356 13 2 9 3 13 0 19 3 25 39 339 13 2 9 3 13 0 19 3 25 12 13 2 9 2 13 0 19 3 25 17 12 39 149 13 2 9 3 13 0 9 2 13 2 9 3 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 2 13 0 13 2 9 1 13 0 19 3 25 12 19 4 30 13 2 9 1 13 0 13 2 9 0 13 0 19 3 25 12 19 4 30 13 2 9 0 13 0 77 19 4 30 11 113 51 3 13 2 9 2 13 0 19 3 25 39 22 13 2 9 2 13 0 19 3 25 12 13 2 9 1 13 0 19 3 25 17 12 39 36 13 2 9 2 13 0 9 2 13 2 9 2 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 1 13 0 77 19 4 30 38 168 13 2 9 2 13 0 19 3 25 39 22 13 2 9 2 13 0 19 3 25 12 13 2 9 1 13 0 19 3 25 17 505 39 61 13 2 9 2 13 0 9 2 13 2 9 2 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 1 13 0 13 2 9 0 13 0 19 3 25 12 19 4 30 13 2 9 0 13 0 77 19 4 30 11 113 51 3 38 74 13 2 9 1 13 0 19 3 25 39 22 13 2 9 1 13 0 19 3 25 12 13 2 9 0 13 0 19 3 25 17 505 39 40 13 2 9 1 13 0 9 2 13 2 9 1 13 0 19 3 25 12 19 2 75 12 19 4 30 13 2 9 0 13 0 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -363 13 4 13 3 72 2 43 2 43 2 29) #1# #2# 42814) ros-01::combine-left (defun ros-01::combine-left) (#2# . 44345) (ros-01::board) #Y(ros-01::combine-left nil nil (24 45 482 26 13 0 19 1 471 12 77 46 504 46 472 8 4 45 445 8 0 45 167 38 356 13 2 13 0 9 0 19 3 25 39 339 13 2 13 0 9 0 19 3 25 12 13 2 13 0 9 1 19 3 25 17 12 39 149 13 2 13 0 9 0 9 2 13 2 13 0 9 0 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 1 13 2 13 0 9 2 19 3 25 12 19 4 30 13 2 13 0 9 2 13 2 13 0 9 3 19 3 25 12 19 4 30 13 2 13 0 9 3 77 19 4 30 11 113 51 3 13 2 13 0 9 1 19 3 25 39 22 13 2 13 0 9 1 19 3 25 12 13 2 13 0 9 2 19 3 25 17 12 39 36 13 2 13 0 9 1 9 2 13 2 13 0 9 1 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 2 77 19 4 30 38 168 13 2 13 0 9 1 19 3 25 39 22 13 2 13 0 9 1 19 3 25 12 13 2 13 0 9 2 19 3 25 17 505 39 61 13 2 13 0 9 1 9 2 13 2 13 0 9 1 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 2 13 2 13 0 9 3 19 3 25 12 19 4 30 13 2 13 0 9 3 77 19 4 30 11 113 51 3 38 74 13 2 13 0 9 2 19 3 25 39 22 13 2 13 0 9 2 19 3 25 12 13 2 13 0 9 3 19 3 25 17 505 39 40 13 2 13 0 9 2 9 2 13 2 13 0 9 2 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 3 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -363 13 4 13 3 72 2 43 2 43 2 29) #1# #2# 44345) ros-01::combine-right (defun ros-01::combine-right) (#2# . 45876) (ros-01::board) #Y(ros-01::combine-right nil nil (24 45 482 26 13 0 19 1 471 12 77 46 504 46 472 8 4 45 445 8 0 45 167 38 356 13 2 13 0 9 3 19 3 25 39 339 13 2 13 0 9 3 19 3 25 12 13 2 13 0 9 2 19 3 25 17 12 39 149 13 2 13 0 9 3 9 2 13 2 13 0 9 3 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 2 13 2 13 0 9 1 19 3 25 12 19 4 30 13 2 13 0 9 1 13 2 13 0 9 0 19 3 25 12 19 4 30 13 2 13 0 9 0 77 19 4 30 11 113 51 3 13 2 13 0 9 2 19 3 25 39 22 13 2 13 0 9 2 19 3 25 12 13 2 13 0 9 1 19 3 25 17 12 39 36 13 2 13 0 9 2 9 2 13 2 13 0 9 2 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 1 77 19 4 30 38 168 13 2 13 0 9 2 19 3 25 39 22 13 2 13 0 9 2 19 3 25 12 13 2 13 0 9 1 19 3 25 17 505 39 61 13 2 13 0 9 2 9 2 13 2 13 0 9 2 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 1 13 2 13 0 9 0 19 3 25 12 19 4 30 13 2 13 0 9 0 77 19 4 30 11 113 51 3 38 74 13 2 13 0 9 1 19 3 25 39 22 13 2 13 0 9 1 19 3 25 12 13 2 13 0 9 0 19 3 25 17 505 39 40 13 2 13 0 9 1 9 2 13 2 13 0 9 1 19 3 25 12 19 2 75 12 19 4 30 13 2 13 0 9 0 77 19 4 30 11 113 51 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -363 13 4 13 3 72 2 43 2 43 2 29) #1# #2# 45876) ros-01::move (defun ros-01::move) (#2# . 47408) (ros-01::direction ros-01::board) ros-01::direction #:g1741 #\L #\l #\R #\r #\U #\u #\D #\d (#\l #\L #\r #\R #\u #\U #\d #\D) si::ecase-error ros-01::functions ros-01::mover ros-01::combiner ros-01::moved ros-01::combined #Y(ros-01::move nil nil (24 45 526 24 45 482 26 10 1 45 527 10 0 41 528 4 42 529 10 33 490 12 33 512 6 2 38 52 41 530 4 42 531 10 33 495 12 33 517 6 2 38 37 41 532 4 42 533 10 33 478 12 33 500 6 2 38 22 41 534 4 42 535 10 33 485 12 33 507 6 2 38 7 13 0 1 536 17 537 43 1 45 538 10 0 4 45 539 10 1 16 305 45 540 13 1 13 3 20 1 23 47 1 483 45 541 10 1 39 5 10 0 51 5 13 2 13 5 20 1 23 47 1 504 45 542 10 1 39 5 10 0 51 7 13 7 10 3 73 40 4 10 1 73 12 72 2 43 2 43 2 43 3 29) #1# #2# 47408) ros-01::losep (defun ros-01::losep) (#2# . 48143) (ros-01::board) #Y(ros-01::losep nil nil (24 45 482 26 57 544 60 296 13 1 19 1 471 45 472 8 4 45 445 8 0 45 167 38 50 8 4 45 445 8 0 45 446 38 23 13 4 13 2 13 0 19 3 25 76 39 5 75 73 36 5 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -30 43 2 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -57 43 2 8 4 45 445 8 0 45 167 38 86 13 2 13 0 9 0 19 3 25 12 13 2 13 0 9 1 19 3 25 12 19 2 48 40 49 13 2 13 0 9 1 19 3 25 12 13 2 13 0 9 2 19 3 25 12 19 2 48 40 24 13 2 13 0 9 2 19 3 25 12 13 2 13 0 9 3 19 3 25 12 19 2 48 39 5 75 73 36 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -93 43 2 8 4 45 445 8 0 45 446 38 86 13 2 9 0 13 0 19 3 25 12 13 2 9 1 13 0 19 3 25 12 19 2 48 40 49 13 2 9 1 13 0 19 3 25 12 13 2 9 2 13 0 19 3 25 12 19 2 48 40 24 13 2 9 2 13 0 19 3 25 12 13 2 9 3 13 0 19 3 25 12 19 2 48 39 5 75 73 36 3 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -93 11 113 73 43 2 43 1 63 29) #1# #2# 48143) ros-01::winp (defun ros-01::winp) (#2# . 48903) (ros-01::board) #Y(ros-01::winp nil nil (24 45 482 26 57 549 60 88 13 1 19 1 471 45 472 8 4 45 445 8 0 45 167 38 55 8 4 45 445 8 0 45 446 38 28 13 4 13 2 13 0 19 3 25 12 8 2048 17 12 39 6 11 113 73 36 5 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -35 43 2 10 0 16 33 51 0 13 0 13 1 19 2 24 40 -62 75 73 43 2 43 1 63 29) #1# #2# 48903) ros-01::play-2048 (defun ros-01::play-2048) (#2# . 49104) *query-io* make-instance ros-01::q "~%~45:@<2048~>~2%" "~A~%" "(L)eft, (R)ight, (U)p, (D)own, (Q)uit" read-line "LRUDQlrudq" find "~%~A" #\Q #\q "~%~46:@<BYE!~>" ros-01::changedp ros-01::altered ros-01::win-eval "~2%~YOU WON!~2%" "Play again?" y-or-n-p ros-01::againp "~%~46:@<BYE!~>" #:g1752 #:g1753 (setf ros-01::tab) ros-01::lose-eval "~2%GAME OVER~2%" "Play again?" "~%~46:@>BYE!~>" #Y(ros-01::play-2048 nil nil (26 57 554 60 298 14 557 15 456 19 1 558 12 77 46 522 46 482 46 559 13 0 15 560 19 2 115 57 21 61 1 1 13 1 15 561 13 2 19 3 115 57 453 60 52 57 21 61 1 1 13 3 15 562 19 2 115 19 0 563 12 8 0 17 172 51 5 13 5 15 564 19 2 565 39 7 75 73 36 1 38 10 13 3 15 566 13 4 19 3 115 35 0 0 62 63 10 3 41 567 4 42 568 13 14 113 15 569 19 2 115 0 36 4 38 179 41 528 22 41 530 19 41 532 16 41 534 13 41 529 10 41 531 7 41 533 4 42 535 155 13 3 13 2 19 2 522 47 1 570 45 571 57 572 60 56 10 2 39 51 13 5 19 1 549 39 44 13 4 15 573 19 2 115 15 574 19 1 575 45 576 10 0 39 14 15 456 19 1 558 51 6 75 73 36 1 38 11 14 113 15 577 19 2 115 0 36 8 43 1 63 10 4 45 578 13 1 19 1 471 12 19 1 448 45 579 13 0 13 1 33 580 18 2 43 1 43 1 57 581 60 46 13 5 19 1 544 39 38 13 4 15 582 19 2 115 15 583 19 1 575 39 14 15 456 19 1 558 51 5 75 73 36 0 38 11 14 113 15 584 19 2 115 0 36 7 63 13 3 19 1 475 43 2 35 0 0 62 73 43 3 63 29) #1# #2# 49104) ros-01::*knapsack-01-data* ((:map 9 150) (:compass 13 35) (:water 153 200) (:sandwich 50 160) (:glucose 15 60) (:tin 68 45) (:banana 27 60) (:apple 39 40) (:cheese 23 30) (:beer 52 10) (:suntan-cream 11 70) (:camera 32 30) (:t-shirt 24 15) (:trousers 48 10) (:umbrella 73 40) (:waterproof-trousers 42 70) (:waterproof-overclothes 43 75) (:note-case 22 80) (:sunglasses 7 20) (:towel 18 12) (:socks 4 50) (:book 30 10)) (defparameter ros-01::*knapsack-01-data*) (#2# . 50953) ros-01::get-arrays (defun ros-01::get-arrays) (#2# . 58153) (&optional (ros-01::data-alist ros-01::*knapsack-01-data*)) ros-01::data-alist :element-type symbol :null ros-01::items fixnum ros-01::v ros-01::w #:list101 caddr #Y(ros-01::get-arrays nil nil (25 40 3 14 586 46 594 26 10 0 16 17 45 108 10 0 16 33 12 14 595 15 596 14 58 14 597 19 5 59 45 598 10 1 16 33 12 14 595 15 599 14 58 9 -1 19 5 59 45 600 10 2 16 33 12 14 595 15 599 14 58 9 -1 19 5 59 45 601 75 45 602 75 45 292 75 45 20 57 21 61 2 10 74 10 8 51 3 8 0 51 1 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 1 9 1 19 2 22 51 1 13 6 13 1 10 2 4 12 19 3 30 13 4 13 1 10 2 16 305 12 19 3 30 13 5 13 1 10 2 16 603 12 19 3 30 35 0 0 62 43 3 13 2 13 0 13 1 72 3 43 4 29) #1# #2# 58153) ros-01::find-value-maxes (defun ros-01::find-value-maxes) (#2# . 58867) (values ros-01::weights &optional (ros-01::max-weight 400)) values ros-01::weights ros-01::max-weight ros-01::value-array ros-01::minus-weight #Y(ros-01::local-max nil nil (24 45 20 24 45 31 26 10 1 16 47 40 5 10 0 16 47 39 14 13 3 13 1 13 0 9 0 19 4 30 38 202 13 5 13 1 19 2 25 12 13 0 19 2 34 39 54 13 3 10 1 16 18 12 13 0 19 3 25 45 9 13 4 13 2 13 1 13 0 9 -1 19 2 34 39 6 10 0 73 38 12 10 2 16 18 12 13 1 32 3 18 2 12 19 4 30 43 1 38 134 13 3 10 1 16 18 12 13 0 19 3 25 12 13 3 10 1 16 18 12 13 0 13 5 13 1 19 2 25 12 19 2 23 12 19 3 25 12 46 613 46 9 13 5 13 3 13 2 13 0 9 -1 19 2 34 39 6 10 0 73 38 12 10 3 16 18 12 13 2 32 4 18 2 12 13 8 13 3 19 2 25 12 13 1 9 -1 19 2 34 39 6 10 1 73 38 24 10 3 16 18 12 13 2 13 7 13 3 19 2 25 12 19 2 23 12 32 4 18 2 12 19 2 22 12 19 2 111 12 19 4 30 43 2 29) #1# #2# 58867) #Y(ros-01::find-value-maxes nil nil (24 45 609 24 45 610 25 40 3 9 400 46 611 26 10 2 16 17 12 10 0 16 33 6 2 12 14 595 15 599 14 58 9 -1 19 5 59 45 612 31 1 614 10 4 16 17 16 18 12 13 2 32 0 18 2 10 1 73 43 1 43 1 29) #1# #2# 58867) ros-01::get-items (defun ros-01::get-items) (#2# . 60837) (ros-01::value-array ros-01::items ros-01::weights &optional (ros-01::max-weight 400)) #Y(ros-01::rec nil nil (24 45 20 24 45 31 26 10 1 16 47 40 8 13 0 9 0 19 2 106 39 5 75 73 38 69 13 6 13 1 13 0 19 3 25 12 13 6 10 1 16 18 12 13 0 19 3 25 12 19 2 34 39 30 13 1 10 1 16 18 12 13 0 13 4 13 1 19 2 25 12 19 2 23 12 32 2 18 2 3 73 38 12 10 1 16 18 12 13 0 32 2 18 2 29) #1# #2# 60837) #Y(nil nil nil (24 45 105 26 13 5 13 0 19 2 25 29) #1# #2# 60837) #Y(ros-01::get-items nil nil (24 45 612 24 45 598 24 45 610 25 40 3 9 400 46 611 26 31 1 620 10 3 16 17 16 18 12 13 1 32 0 18 2 45 54 34 621 12 13 0 19 2 50 43 1 43 1 29) #1# #2# 60837) ros-01::knapsack-0/1-main (defun ros-01::knapsack-0/1-main) (#2# . 61542) ros-01::value-maxes #Y(ros-01::knapsack-0/1-main nil nil (26 19 0 590 47 2 609 47 1 610 45 598 13 2 13 1 19 2 605 45 626 13 0 13 1 13 2 19 3 616 43 1 43 3 29) #1# #2# 61542))) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 34 35 12 19 2 36 1 2 73 29) #1# #2# 38) #Y(si::bytecodes nil nil (15 37 15 3 15 38 15 39 19 4 6 15 37 14 7 77 15 40 19 4 6 15 37 34 65 12 19 2 36 15 37 15 66 15 67 19 3 68 1 37 73 29) #1# #2# 1932) #Y(si::bytecodes nil nil (15 69 15 3 15 70 15 71 19 4 6 15 69 14 7 77 15 72 19 4 6 15 69 1 79 12 19 2 36 15 69 15 66 15 80 19 3 68 1 69 73 29) #1# #2# 2714) #Y(si::bytecodes nil nil (15 81 15 3 15 82 15 83 19 4 6 15 81 14 7 77 15 84 19 4 6 15 81 1 86 12 19 2 36 15 81 15 66 15 87 19 3 68 1 81 73 29) #1# #2# 2944) #Y(si::bytecodes nil nil (1 88 16 89 14 90 33 91 12 14 92 9 200 14 93 15 94 14 95 15 96 19 8 97 52 88 15 88 15 98 15 99 19 3 68 15 88 15 3 15 100 15 101 19 4 6 1 88 73 29) #1# #2# 3290) #Y(si::bytecodes nil nil (15 102 15 3 15 103 15 104 19 4 6 15 102 14 7 77 77 19 4 6 15 102 1 127 12 19 2 36 1 102 73 29) #1# #2# 5848) #Y(si::bytecodes nil nil (15 128 15 3 15 129 15 130 19 4 6 15 128 14 7 77 77 19 4 6 15 128 1 133 12 19 2 36 1 128 73 29) #1# #2# 8131) #Y(si::bytecodes nil nil (15 134 15 3 15 135 15 136 19 4 6 15 134 14 7 77 77 19 4 6 15 134 1 137 12 19 2 36 1 134 73 29) #1# #2# 9108) #Y(si::bytecodes nil nil (15 138 15 3 15 139 15 140 19 4 6 15 138 14 7 77 77 19 4 6 15 138 1 141 12 19 2 36 1 138 73 29) #1# #2# 9295) #Y(si::bytecodes nil nil (15 142 15 3 15 143 15 144 19 4 6 15 142 14 7 77 77 19 4 6 15 142 1 145 12 19 2 36 1 142 73 29) #1# #2# 9620) #Y(si::bytecodes nil nil (1 146 16 89 1 147 52 146 15 146 15 3 15 148 15 149 19 4 6 1 146 73 29) #1# #2# 10226) #Y(si::bytecodes nil nil (15 150 15 3 15 151 15 152 19 4 6 15 150 14 7 77 15 153 19 4 6 15 150 1 158 12 19 2 36 15 150 15 66 15 159 19 3 68 1 150 73 29) #1# #2# 12840) #Y(si::bytecodes nil nil (15 160 15 3 15 161 15 162 19 4 6 15 160 14 7 77 15 163 19 4 6 15 160 1 176 12 19 2 36 15 160 15 66 15 177 19 3 68 1 160 73 29) #1# #2# 13068) #Y(si::bytecodes nil nil (15 178 15 3 15 179 15 180 19 4 6 15 178 14 7 77 15 181 19 4 6 15 178 34 203 12 19 2 36 15 178 15 66 15 204 19 3 68 1 178 73 29) #1# #2# 13634) #Y(si::bytecodes nil nil (1 205 16 89 14 146 19 1 150 12 19 1 160 52 205 15 205 15 98 15 206 19 3 68 15 205 15 3 15 207 15 208 19 4 6 1 205 73 29) #1# #2# 15213) #Y(si::bytecodes nil nil (1 209 16 89 14 205 19 1 178 52 209 15 209 15 98 15 210 19 3 68 15 209 15 3 15 211 15 212 19 4 6 1 209 73 29) #1# #2# 15351) #Y(si::bytecodes nil nil (15 213 15 3 15 214 15 215 19 4 6 15 213 14 7 77 15 216 19 4 6 15 213 1 226 12 19 2 36 15 213 15 66 15 227 19 3 68 1 213 73 29) #1# #2# 15900) #Y(si::bytecodes nil nil (15 228 15 3 15 229 15 230 19 4 6 15 228 14 7 77 15 231 19 4 6 15 228 1 235 12 19 2 36 1 228 73 29) #1# #2# 16717) #Y(si::bytecodes nil nil (15 236 15 3 15 237 15 238 19 4 6 15 236 14 7 77 15 239 19 4 6 15 236 1 240 12 19 2 36 1 236 73 29) #1# #2# 16814) #Y(si::bytecodes nil nil (15 228 15 3 15 241 15 242 19 4 6 15 228 15 236 9 1 19 3 243 1 228 73 29) #1# #2# 16941) #Y(si::bytecodes nil nil (15 244 15 3 15 245 15 246 19 4 6 15 244 14 7 77 15 247 19 4 6 15 244 1 248 12 19 2 36 1 244 73 29) #1# #2# 16975) #Y(si::bytecodes nil nil (15 249 15 3 15 250 15 251 19 4 6 15 249 14 7 77 15 252 19 4 6 15 249 1 253 12 19 2 36 1 249 73 29) #1# #2# 17080) #Y(si::bytecodes nil nil (15 244 15 3 15 254 15 255 19 4 6 15 244 15 249 9 1 19 3 243 1 244 73 29) #1# #2# 17191) #Y(si::bytecodes nil nil (15 256 15 3 15 257 15 258 19 4 6 15 256 14 7 77 15 259 19 4 6 15 256 1 260 12 19 2 36 1 256 73 29) #1# #2# 17222) #Y(si::bytecodes nil nil (15 193 15 3 15 261 15 262 19 4 6 15 193 14 7 77 15 263 19 4 6 15 193 1 264 12 19 2 36 1 193 73 29) #1# #2# 17310) #Y(si::bytecodes nil nil (15 265 15 3 15 266 15 267 19 4 6 15 265 14 7 77 15 268 19 4 6 15 265 1 285 12 19 2 36 15 265 15 66 15 286 19 3 68 1 265 73 29) #1# #2# 17404) #Y(si::bytecodes nil nil (15 287 15 3 15 288 15 289 19 4 6 15 287 14 7 77 15 290 19 4 6 15 287 34 295 12 19 2 36 15 287 15 66 15 296 19 3 68 1 287 73 29) #1# #2# 19050) #Y(si::bytecodes nil nil (15 297 15 3 15 298 15 299 19 4 6 15 297 14 7 77 15 300 19 4 6 15 297 1 306 12 19 2 36 1 297 73 29) #1# #2# 19377) #Y(si::bytecodes nil nil (15 307 15 3 15 308 15 309 19 4 6 15 307 14 7 77 15 310 19 4 6 15 307 1 326 12 19 2 36 15 307 15 66 15 327 19 3 68 1 307 73 29) #1# #2# 20122) #Y(si::bytecodes nil nil (15 328 15 3 15 329 15 330 19 4 6 15 328 14 7 77 15 331 19 4 6 15 328 34 344 12 19 2 36 1 328 73 29) #1# #2# 21245) #Y(si::bytecodes nil nil (15 345 15 3 15 346 15 347 19 4 6 15 345 14 7 77 15 348 19 4 6 15 345 1 360 12 19 2 36 1 345 73 29) #1# #2# 22381) #Y(si::bytecodes nil nil (15 361 15 3 15 362 15 363 19 4 6 15 361 14 7 77 77 19 4 6 15 361 1 374 12 19 2 36 1 361 73 29) #1# #2# 23277) #Y(si::bytecodes nil nil (15 375 15 3 15 376 15 377 19 4 6 15 375 14 7 77 15 378 19 4 6 15 375 1 382 12 19 2 36 1 375 73 29) #1# #2# 24184) #Y(si::bytecodes nil nil (15 383 15 3 15 384 15 385 19 4 6 15 383 14 7 77 15 386 19 4 6 15 383 34 394 12 19 2 36 1 383 73 29) #1# #2# 27547) #Y(si::bytecodes nil nil (15 395 15 3 15 396 15 397 19 4 6 15 395 14 7 77 15 398 19 4 6 15 395 1 400 12 19 2 36 1 395 73 29) #1# #2# 28089) #Y(si::bytecodes nil nil (1 401 16 89 15 402 15 403 15 404 15 405 15 406 1 407 6 6 52 401 15 401 15 3 15 408 15 409 19 4 6 1 401 73 29) #1# #2# 28168) #Y(si::bytecodes nil nil (15 410 15 3 15 411 15 412 19 4 6 15 410 14 7 77 77 19 4 6 15 410 1 413 12 19 2 36 1 410 73 29) #1# #2# 28438) #Y(si::bytecodes nil nil (15 414 15 3 15 415 15 416 19 4 6 15 414 14 7 77 15 417 19 4 6 15 414 1 420 12 19 2 36 1 414 73 29) #1# #2# 28523) #Y(si::bytecodes nil nil (15 421 15 3 15 422 15 423 19 4 6 15 421 14 7 77 15 424 19 4 6 15 421 1 428 12 19 2 36 1 421 73 29) #1# #2# 30500) #Y(si::bytecodes nil nil (15 429 15 3 15 430 15 431 19 4 6 15 429 14 7 77 77 19 4 6 15 429 1 438 12 19 2 36 1 429 73 29) #1# #2# 30924) #Y(si::bytecodes nil nil (15 439 15 3 15 440 15 441 19 4 6 15 439 14 7 77 15 442 19 4 6 15 439 1 447 12 19 2 36 1 439 73 29) #1# #2# 31537) #Y(si::bytecodes nil nil (15 448 15 3 15 449 15 450 19 4 6 15 448 14 7 77 15 451 19 4 6 15 448 1 455 12 19 2 36 1 448 73 29) #1# #2# 34450) #Y(si::bytecodes nil nil (15 456 15 3 15 457 15 458 19 4 6 15 456 77 14 459 1 461 12 1 462 7 3 6 1 12 77 19 4 463 29) #1# #2# 34770) #Y(si::bytecodes nil nil (15 464 15 3 15 465 15 466 19 4 6 15 464 77 15 467 15 468 1 476 12 19 5 477 29) #1# #2# 34981) #Y(si::bytecodes nil nil (15 478 15 3 15 479 15 480 19 4 6 15 478 14 7 77 15 481 19 4 6 15 478 1 484 12 19 2 36 1 478 73 29) #1# #2# 35312) #Y(si::bytecodes nil nil (15 485 15 3 15 486 15 487 19 4 6 15 485 14 7 77 15 488 19 4 6 15 485 1 489 12 19 2 36 1 485 73 29) #1# #2# 36783) #Y(si::bytecodes nil nil (15 490 15 3 15 491 15 492 19 4 6 15 490 14 7 77 15 493 19 4 6 15 490 1 494 12 19 2 36 1 490 73 29) #1# #2# 38272) #Y(si::bytecodes nil nil (15 495 15 3 15 496 15 497 19 4 6 15 495 14 7 77 15 498 19 4 6 15 495 1 499 12 19 2 36 1 495 73 29) #1# #2# 39777) #Y(si::bytecodes nil nil (15 500 15 3 15 501 15 502 19 4 6 15 500 14 7 77 15 503 19 4 6 15 500 1 506 12 19 2 36 1 500 73 29) #1# #2# 41268) #Y(si::bytecodes nil nil (15 507 15 3 15 508 15 509 19 4 6 15 507 14 7 77 15 510 19 4 6 15 507 1 511 12 19 2 36 1 507 73 29) #1# #2# 42814) #Y(si::bytecodes nil nil (15 512 15 3 15 513 15 514 19 4 6 15 512 14 7 77 15 515 19 4 6 15 512 1 516 12 19 2 36 1 512 73 29) #1# #2# 44345) #Y(si::bytecodes nil nil (15 517 15 3 15 518 15 519 19 4 6 15 517 14 7 77 15 520 19 4 6 15 517 1 521 12 19 2 36 1 517 73 29) #1# #2# 45876) #Y(si::bytecodes nil nil (15 522 15 3 15 523 15 524 19 4 6 15 522 14 7 77 15 525 19 4 6 15 522 1 543 12 19 2 36 1 522 73 29) #1# #2# 47408) #Y(si::bytecodes nil nil (15 544 15 3 15 545 15 546 19 4 6 15 544 14 7 77 15 547 19 4 6 15 544 1 548 12 19 2 36 1 544 73 29) #1# #2# 48143) #Y(si::bytecodes nil nil (15 549 15 3 15 550 15 551 19 4 6 15 549 14 7 77 15 552 19 4 6 15 549 1 553 12 19 2 36 1 549 73 29) #1# #2# 48903) #Y(si::bytecodes nil nil (15 554 15 3 15 555 15 556 19 4 6 15 554 14 7 77 77 19 4 6 15 554 1 585 12 19 2 36 1 554 73 29) #1# #2# 49104) #Y(si::bytecodes nil nil (1 586 16 89 1 587 52 586 15 586 15 3 15 588 15 589 19 4 6 1 586 73 29) #1# #2# 50953) #Y(si::bytecodes nil nil (15 590 15 3 15 591 15 592 19 4 6 15 590 14 7 77 15 593 19 4 6 15 590 1 604 12 19 2 36 1 590 73 29) #1# #2# 58153) #Y(si::bytecodes nil nil (15 605 15 3 15 606 15 607 19 4 6 15 605 14 7 77 15 608 19 4 6 15 605 34 615 12 19 2 36 1 605 73 29) #1# #2# 58867) #Y(si::bytecodes nil nil (15 616 15 3 15 617 15 618 19 4 6 15 616 14 7 77 15 619 19 4 6 15 616 34 622 12 19 2 36 1 616 73 29) #1# #2# 60837) #Y(si::bytecodes nil nil (15 623 15 3 15 624 15 625 19 4 6 15 623 14 7 77 77 19 4 6 15 623 1 627 12 19 2 36 1 623 73 29) #1# #2# 61542))
