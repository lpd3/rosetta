(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (1018) ("ROS-01" si::select-package ros-01::*multiplicands* si::*make-special :pair :sco :doz :gr :greatgr :googol 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 :k :m 1000000 :g 1000000000 :t 1000000000000 :p 1000000000000000 :e 1000000000000000000 :z 1000000000000000000000 :y 1000000000000000000000000 :x 1000000000000000000000000000 :w 1000000000000000000000000000000 :v 1000000000000000000000000000000000 :u 1000000000000000000000000000000000000 :ki :mi 1048576 :gi 1073741824 :ti 1099511627776 :pi 1125899906842624 :ei 1152921504606846976 :zi 1180591620717411303424 :yi 1208925819614629174706176 :xi 1237940039285380274899124224 :wi 1267650600228229401496703205376 :vi 1298074214633706907132624082305024 :ui 1329227995784915872903807060280344576 serapeum::dict ext::location (defparameter ros-01::*multiplicands*) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/rosetta/rc-004.lisp" . 39) ext::annotate ros-01::*keys* (("^(?i)pair(s)?" . :pair) ("^(?i)sco(res|re|r)?" . :sco) ("^(?i)doz(ens|en|e)?" . :doz) ("^(?i)greatgr(oss|os|o)?" . :greatgr) ("^(?i)gr(oss|os|o)?" . :gr) ("^(?i)googol(s)?" . :googol) ("^(?i)ki" . :ki) ("^(?i)mi" . :mi) ("^(?i)gi" . :gi) ("^(?i)ti" . :ti) ("^(?i)pi" . :pi) ("^(?i)ei" . :ei) ("^(?i)zi" . :zi) ("^(?i)yi" . :yi) ("^(?i)xi" . :xi) ("^(?i)wi" . :wi) ("^(?i)vi" . :vi) ("^(?i)ui" . :ui) ("^[kK]" . :k) ("^[mM]" . :m) ("^[gG]" . :g) ("^[tT]" . :t) ("^[pP]" . :p) ("^[eE]" . :e) ("^[zZ]" . :z) ("^[yY]" . :y) ("^[xX]" . :x) ("^[wW]" . :w) ("^[vV]" . :v) ("^[uU]" . :u)) (defparameter ros-01::*keys*) (#2# . 6303) ros-01::multi-fac (defun ros-01::multi-fac) (#2# . 7029) :lambda-list (ros-01::!count) ros-01::!count ros-01::n * ros-01::i #:step122 #:result121 #:end-pointer123 #:temp124 0 + - < #:g1937 #:g1938 rplacd apply #Y(nil nil nil (24 45 72 26 33 73 12 75 45 74 75 45 75 75 45 76 75 45 77 75 45 78 57 79 61 2 15 78 10 7 51 4 13 6 13 4 19 2 80 51 5 13 5 13 4 19 2 81 51 5 13 5 9 1 19 2 82 39 4 35 0 1 10 5 6 1 51 1 10 3 39 23 10 2 45 83 10 2 45 84 13 1 10 0 17 85 10 0 43 1 43 1 38 5 10 1 51 3 51 2 10 3 35 0 0 62 13 2 43 5 19 2 86 29) #1# #2# 7029) #Y(ros-01::multi-fac nil nil (24 45 71 26 34 87 73 29) #1# #2# 7029) si::fset ros-01::multi-branch (defun ros-01::multi-branch) (#2# . 7163) (ros-01::key) ros-01::key gethash #Y(nil nil nil (24 45 72 26 13 0 13 1 14 2 19 2 95 12 19 2 73 29) #1# #2# 7163) #Y(ros-01::multi-branch nil nil (24 45 94 26 34 96 73 29) #1# #2# 7163) ros-01::num-and-suffixes-strings (defun ros-01::num-and-suffixes-strings) (#2# . 7253) (ros-01::str) ros-01::str #\, remove ros-01::no-commas "[+-]?\\d*\\.?\\d*([eE][-+]?\\d+)?" cl-ppcre::scan-to-strings ros-01::num mismatch ros-01::mismatch-index subseq "" #Y(ros-01::num-and-suffixes-strings nil nil (24 45 102 26 15 103 13 0 19 2 104 45 105 15 106 13 0 19 2 107 45 108 13 0 13 1 19 2 109 45 110 10 0 39 15 13 1 13 2 13 0 19 2 111 12 72 2 38 7 13 1 15 112 72 2 43 1 43 2 29) #1# #2# 7253) ros-01::num-string->num (defun ros-01::num-string->num) (#2# . 7705) (ros-01::num-string) ros-01::num-string length zerop digit-char-p every parse-integer = char (#\- #\+) member #\. char= :junk-allowed t > (#\+ #\-) 1- double-float *read-default-float-format* serapeum::parse-float #Y(ros-01::num-string->num nil nil (24 45 118 26 10 0 16 119 16 120 39 6 8 0 73 38 265 33 121 12 13 0 19 2 122 39 8 13 0 19 1 123 38 248 10 0 16 119 12 9 1 19 2 124 39 12 13 0 19 1 125 12 9 0 19 2 121 39 8 13 0 19 1 123 38 216 10 0 16 119 12 9 2 19 2 124 39 25 13 0 8 0 17 125 12 15 126 19 2 127 39 11 13 0 8 1 17 125 12 19 1 121 39 8 13 0 19 1 123 38 171 10 0 16 119 12 9 2 19 2 124 39 25 13 0 8 0 17 125 12 19 1 121 39 13 13 0 8 1 17 125 12 15 128 19 2 129 39 12 13 0 14 130 14 131 19 3 123 38 122 10 0 16 119 12 9 2 19 2 132 39 86 13 0 8 0 17 125 12 19 1 121 40 13 13 0 8 0 17 125 12 15 133 19 2 127 39 60 33 121 12 13 0 9 1 10 0 16 119 12 9 1 19 2 81 12 19 3 111 12 19 2 122 39 33 13 0 10 0 16 119 16 134 17 125 12 19 1 121 40 17 13 0 10 0 16 119 16 134 17 125 12 15 128 19 2 129 39 12 13 0 14 130 14 131 19 3 123 38 12 1 135 48 136 13 0 19 1 137 44 1 29) #1# #2# 7705) ros-01::suffixes->fn-list (defun ros-01::suffixes->fn-list) (#2# . 8996) (ros-01::suffixes) ros-01::suffixes "^!+" cl-ppcre::scan ros-01::_ ros-01::end ros-01::start append #:list128 ros-01::regex #:dsetq1942 "No matching regex for ~S ~%~
                suffixes->fn-list" error #Y(ros-01::suffixes->fn-list nil nil (24 45 143 26 10 0 16 119 16 120 39 5 75 73 38 169 15 144 13 0 19 2 145 47 3 146 47 2 146 47 1 147 45 148 10 0 39 26 13 4 13 1 19 2 111 12 19 1 139 12 13 1 19 1 66 6 1 12 19 2 149 38 120 75 45 150 75 45 151 75 45 94 58 60 106 57 79 61 2 6 89 11 62 51 4 10 4 2 39 4 35 0 1 10 4 4 45 152 10 0 4 51 4 10 0 5 51 3 10 0 43 1 10 4 5 51 4 13 3 13 9 19 2 145 47 3 146 47 2 146 47 1 147 45 148 10 0 39 26 13 13 13 1 19 2 111 12 19 1 139 12 13 6 19 1 90 6 1 12 19 2 149 36 5 43 4 35 0 0 15 153 13 9 19 2 154 62 75 73 63 43 3 43 4 29) #1# #2# 8996) ros-01::calculate (defun ros-01::calculate) (#2# . 9853) (ros-01::num ros-01::fn-list) ros-01::fn-list integerp 0.0d0 float #Y(ros-01::calculate nil nil (24 45 108 24 45 160 26 10 0 76 39 21 10 1 16 161 39 6 10 1 73 38 8 13 1 15 162 19 2 163 38 18 10 0 4 12 13 1 10 0 5 12 19 2 156 12 20 1 23 29) #1# #2# 9853) ros-01::parse-and-calc (defun ros-01::parse-and-calc) (#2# . 10058) (ros-01::str) ros-01::num-str #Y(ros-01::parse-and-calc nil nil (24 45 102 26 13 0 19 1 98 47 1 143 45 169 13 0 19 1 114 12 13 1 19 1 139 12 19 2 156 43 2 29) #1# #2# 10058) ros-01::*na-data* "2greatGRo   24Gros  288Doz  1,728pairs  172.8SCOre
    1,567      +1.567k    0.1567e-2m
    25.123kK    25.123m   2.5123e-00002G
    25.123kiKI  25.123Mi  2.5123e-00002Gi  +.25123E-7Ei
    -.25123e-34Vikki      2e-77gooGols
    9!   9!!   9!!!   9!!!!   9!!!!!   9!!!!!!   9!!!!!!!   9!!!!!!!!   9!!!!!!!!!    " (defparameter ros-01::*na-data*) (#2# . 10255) ros-01::float-commas (defun ros-01::float-commas) (#2# . 10596) (real) real "~:D" format "~G" truncate ros-01::frac ros-01::int abs >= "~:D,~F" "~:D,0~F" "~:D,00~F" #Y(ros-01::float-commas nil nil (24 45 179 26 10 0 16 161 39 11 77 15 180 13 0 19 3 181 38 104 9 -1000 13 0 9 1000 19 3 82 39 12 14 131 15 182 13 0 19 3 181 38 82 13 0 9 1000 19 2 183 47 1 184 45 185 10 1 16 186 12 9 100 19 2 187 39 16 77 15 188 13 0 10 1 16 186 12 19 4 181 38 41 10 1 16 186 12 9 10 19 2 187 39 16 77 15 189 13 0 10 1 16 186 12 19 4 181 38 14 77 15 190 13 0 10 1 16 186 12 19 4 181 43 2 29) #1# #2# 10596) ros-01::numeric-and-alphabetical-main (defun ros-01::numeric-and-alphabetical-main) (#2# . 11193) :separator (#\Newline) uiop/utility::split-string ros-01::lines si::%dolist-var ros-01::line serapeum::tokens ros-01::expressions "~%~A" "~%~{~A~^  ~}" ros-01::ex #Y(nil nil nil (24 45 205 26 13 0 19 1 165 12 19 1 175 29) #1# #2# 11193) mapcar #Y(ros-01::numeric-and-alphabetical-main nil nil (26 14 171 14 195 15 196 19 3 197 45 198 10 0 45 199 38 47 10 0 4 45 200 13 0 19 1 201 45 202 14 131 15 203 13 1 19 3 181 14 131 15 204 1 206 12 13 0 19 2 207 12 19 3 181 43 1 10 1 5 51 1 43 1 10 0 40 -49 75 73 43 1 43 1 29) #1# #2# 11193) identity ros-01::*cont* ros-01::*paths* variable "Used to store paths of future computation
  that have not yet been tried." si::set-documentation (defparameter ros-01::*paths*) (#2# . 15969) ros-01::+failsym+ ros-01::@ si::*make-constant "Symbol to indicate failure. We decided
  to use a dedicated symbol for amb failure,
  since NIL already has 3 meanings: the
  empty list, Boolean false and search 
  failure." (defconstant ros-01::+failsym+) (#2# . 16113) ros-01::fail (defun ros-01::fail) (#2# . 16320) #:g1944 #Y(ros-01::fail nil nil (26 11 211 39 25 11 211 45 226 10 0 4 12 10 0 5 51 0 10 0 52 211 43 1 20 0 23 38 4 11 217 73 29) #1# #2# 16320) function "When a choice fails, we try the next choice.
  If there is no next choice, we return 
  +failsym+" ros-01::amb (defmacro ros-01::amb) (#2# . 16500) (&rest ros-01::choices) #:g1946 #:g1945 #:g1947 ros-01::choices progn ros-01::c push lambda #Y(nil nil nil (24 45 239 26 15 240 15 228 15 241 77 10 0 6 3 6 2 12 1 211 6 3 73 29) #1# #2# 16500) reverse (ros-01::fail) #Y(ros-01::amb nil nil (24 45 234 24 45 235 26 10 1 5 45 236 10 0 45 237 10 0 39 30 15 238 1 242 12 10 0 5 16 243 12 19 2 207 12 10 0 4 6 1 12 19 2 149 7 2 73 38 4 1 244 73 29) #1# #2# 16500) ros-01::cb (defun ros-01::cb) (#2# . 16781) (ros-01::fn ros-01::choices) ros-01::fn #Y(nil nil nil (26 13 1 10 0 5 12 19 2 246 29) #1# #2# 16781) #Y(ros-01::cb nil nil (24 45 250 24 45 237 26 10 0 39 25 10 0 5 39 9 34 251 12 11 211 3 52 211 13 1 10 0 4 12 20 1 23 38 4 19 0 223 29) #1# #2# 16781) "Auxiliary function for amb-bind." ros-01::amb-bind (defmacro ros-01::amb-bind) (#2# . 17042) (ros-01::var ros-01::choices &body ros-01::body) #:g1951 #:g1950 #:g1952 si::dm-too-few-arguments ros-01::var ros-01::body #Y(ros-01::amb-bind nil nil (24 45 258 24 45 259 26 10 1 5 45 260 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 262 10 1 76 39 6 13 3 19 1 261 10 1 4 12 10 1 5 51 1 22 45 237 10 2 45 263 15 246 15 228 15 241 10 2 6 1 12 10 0 7 3 6 2 12 10 1 6 3 73 29) #1# #2# 17042) "Convenience macro to facilitate supplying
  amb with choices that are functions. Not
  strictly necessary" ros-01::=lambda (defmacro ros-01::=lambda) (#2# . 17240) (ros-01::parms &body ros-01::body) #:g1954 #:g1953 #:g1955 ros-01::parms #Y(ros-01::=lambda nil nil (24 45 270 24 45 271 26 10 1 5 45 272 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 273 10 1 45 263 15 228 15 241 15 210 10 1 7 2 12 10 0 7 3 6 2 73 29) #1# #2# 17240) "Creates a local, anonymous function." ros-01::=defun (defmacro ros-01::=defun) (#2# . 17886) (ros-01::name ros-01::parms &body ros-01::body) #:g1957 #:g1956 #:g1958 ros-01::name string "=" symbol-name concatenate intern ros-01::f defmacro list quote (quote ros-01::*cont*) defun #Y(ros-01::=defun nil nil (24 45 280 24 45 281 26 10 1 5 45 282 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 283 10 1 76 39 6 13 3 19 1 261 10 1 4 12 10 1 5 51 1 22 45 273 10 2 45 263 15 284 15 285 10 2 16 286 12 19 3 287 12 19 1 288 45 289 15 238 15 290 13 3 13 2 15 291 15 292 10 0 6 2 12 15 293 10 2 7 4 6 4 12 15 294 13 0 15 210 10 2 7 2 12 10 1 7 4 6 3 73 43 1 29) #1# #2# 17886) "Define a new dynamic/global function.
  Unlike defun, =defun requires a 
  special operator in functions to 
  return values. This is =values, below." ros-01::=bind (defmacro ros-01::=bind) (#2# . 18334) (ros-01::parms ros-01::expr &body ros-01::body) #:g1960 #:g1959 #:g1961 ros-01::expr let #Y(ros-01::=bind nil nil (24 45 301 24 45 302 26 10 1 5 45 303 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 273 10 1 76 39 6 13 3 19 1 261 10 1 4 12 10 1 5 51 1 22 45 304 10 2 45 263 15 305 15 210 15 228 15 241 13 2 10 0 7 3 6 2 6 2 6 1 12 10 1 6 3 73 29) #1# #2# 18334) "The cl macro is multiple-value-bind.
  Receives multiple values from a single
  expr, binds them to parms, and executes
  body in the lexical environment of the
  bindings." ros-01::=values (defmacro ros-01::=values) (#2# . 18616) (&rest ros-01::retvals) #:g1963 #:g1962 #:g1964 ros-01::retvals funcall #Y(ros-01::=values nil nil (24 45 312 24 45 313 26 10 1 5 45 314 10 0 45 315 15 316 15 210 10 0 7 3 73 29) #1# #2# 18616) "Like 'values' in that it can be used
  to return multiple values from a function.
  In addition, all functions written with
  =defun that return one or more values 
  must either end with =values or with
  a call to a function that does." ros-01::=funcall (defmacro ros-01::=funcall) (#2# . 18924) (ros-01::fn &rest ros-01::args) #:g1966 #:g1965 #:g1967 ros-01::args #Y(ros-01::=funcall nil nil (24 45 323 24 45 324 26 10 1 5 45 325 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 250 10 1 45 326 15 316 13 1 15 210 10 0 7 4 73 29) #1# #2# 18924) "Call a function passed as an argument." ros-01::=apply (defmacro ros-01::=apply) (#2# . 19035) (ros-01::fn &rest ros-01::args) #:g1969 #:g1968 #:g1970 #Y(ros-01::=apply nil nil (24 45 333 24 45 334 26 10 1 5 45 335 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 250 10 1 45 326 15 86 13 1 15 210 10 0 7 4 73 29) #1# #2# 19035) "Call a function, using the elements of 
  a list as its arguments." serapeum::words (defmacro serapeum::words) (#2# . 19170) #:g1972 #:g1971 #:g1973 si::dm-too-many-arguments ros-01::=words #Y(serapeum::words nil nil (24 45 341 24 45 342 26 10 1 5 45 343 10 0 39 6 13 2 19 1 344 15 345 1 210 6 2 73 29) #1# #2# 19170) (defun ros-01::=words) (#2# . 19170) (ros-01::*cont*) ros-01::word1 ros-01::word2 ros-01::word3 ros-01::word4 #Y(nil nil nil (24 45 353 26 13 4 13 3 13 2 13 1 13 0 20 4 23 29) #1# #2# 19170) ("slowly" "quickly") #Y(nil nil nil (24 45 352 26 34 354 12 15 355 19 2 246 29) #1# #2# 19170) ("walked" "treaded" "grows") #Y(nil nil nil (24 45 351 26 34 356 12 15 357 19 2 246 29) #1# #2# 19170) ("frog" "elephant" "thing") #Y(nil nil nil (24 45 350 26 34 358 12 15 359 19 2 246 29) #1# #2# 19170) ("the" "that" "a") #Y(ros-01::=words nil nil (24 45 210 26 34 360 12 15 361 19 2 246 29) #1# #2# 19170) ros-01::amb-main (defmacro ros-01::amb-main) (#2# . 19455) #:g1975 #:g1974 #:g1976 ros-01::=amb-main #Y(ros-01::amb-main nil nil (24 45 366 24 45 367 26 10 1 5 45 368 10 0 39 6 13 2 19 1 344 15 369 1 210 6 2 73 29) #1# #2# 19455) (defun ros-01::=amb-main) (#2# . 19455) (ros-01::*cont*) ros-01::w1 ros-01::w2 ros-01::w3 ros-01::w4 #Y(nil nil nil (24 45 374 24 45 375 24 45 376 24 45 377 26 13 3 10 3 16 119 16 134 17 125 12 13 2 8 0 17 125 12 19 2 129 39 45 13 2 10 2 16 119 16 134 17 125 12 13 1 8 0 17 125 12 19 2 129 39 22 13 1 10 1 16 119 16 134 17 125 12 13 0 8 0 17 125 12 19 2 129 39 14 13 3 13 2 13 1 10 0 6 4 73 38 4 19 0 223 29) #1# #2# 19455) #Y(ros-01::=amb-main nil nil (24 45 210 26 1 378 45 210 13 0 19 1 345 43 1 29) #1# #2# 19455) ros-01::add-history (defmacro ros-01::add-history) (#2# . 19784) (ros-01::var) #:g1978 #:g1977 #:g1979 get (:history nil) #Y(ros-01::add-history nil nil (24 45 384 24 45 385 26 10 1 5 45 386 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 262 10 1 39 6 13 3 19 1 344 15 240 13 0 15 387 15 292 10 0 6 2 12 1 388 7 3 6 3 73 29) #1# #2# 19784) "Aux macro for set-hist" ros-01::set-history-var (defmacro ros-01::set-history-var) (#2# . 22081) (ros-01::var ros-01::expr) #:g1981 #:g1980 #:g1982 "gexpr" gensym ros-01::gexpr setf #Y(ros-01::set-history-var nil nil (24 45 395 24 45 396 26 10 1 5 45 397 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 262 10 1 76 39 6 13 3 19 1 261 10 1 4 12 10 1 5 51 1 22 45 304 10 2 39 6 13 4 19 1 344 15 398 19 1 399 45 400 15 305 13 0 10 1 6 2 6 1 12 15 401 13 2 10 0 6 3 12 15 380 10 2 6 2 12 10 0 6 5 73 43 1 29) #1# #2# 22081) "Setter for a history variable" ros-01::get-history (defun ros-01::get-history) (#2# . 22283) (ros-01::quoted-var) ros-01::quoted-var :history symbol-plist "~A is not a history variable." #Y(ros-01::get-history nil nil (24 45 408 26 14 409 10 0 16 410 12 19 2 127 76 39 12 14 131 15 411 13 0 19 3 181 38 8 13 0 14 409 19 2 387 29) #1# #2# 22283) "Returns the history of a history variable." ros-01::recall (defmacro ros-01::recall) (#2# . 22558) (ros-01::var) #:g1984 #:g1983 #:g1985 "value" ros-01::value cond not "~A not a history variable." null pop car #Y(ros-01::recall nil nil (24 45 418 24 45 419 26 10 1 5 45 420 10 0 76 39 6 13 2 19 1 261 10 0 4 12 10 0 5 51 0 22 45 262 10 1 39 6 13 3 19 1 344 15 421 19 1 399 45 422 15 423 15 424 15 127 14 409 15 410 15 292 10 1 6 2 6 2 6 3 6 2 12 15 154 15 425 15 292 10 1 6 2 6 3 6 2 12 15 426 15 387 15 292 10 1 6 2 12 11 409 6 3 6 2 12 15 401 13 1 75 6 3 6 2 12 15 131 15 427 15 387 15 292 10 1 6 2 12 11 409 6 3 6 2 12 15 401 13 1 15 428 15 387 15 292 10 1 6 2 12 11 409 6 3 6 2 6 3 6 3 6 4 73 43 1 29) #1# #2# 22558) ros-01::*precedence* (("^" . 4) ("*" . 3) ("/" . 3) ("+" . 2) ("-" . 2)) (defparameter ros-01::*precedence*) (#2# . 22943) ros-01::precedence> (defun ros-01::precedence>) (#2# . 24590) (ros-01::op1 ros-01::op2) ros-01::op1 ros-01::op2 :test equal assoc #Y(ros-01::precedence> nil nil (24 45 438 24 45 439 26 13 1 14 430 14 440 33 441 12 19 4 442 5 12 13 0 14 430 14 440 33 441 12 19 4 442 5 12 19 2 132 29) #1# #2# 24590) ros-01::operatorp (defun ros-01::operatorp) (#2# . 24722) (ros-01::token) ros-01::token ("^" "*" "/" "+" "-") #Y(ros-01::operatorp nil nil (24 45 448 26 13 0 15 449 14 440 33 441 12 19 4 127 29) #1# #2# 24722) ros-01::infix-list->rpn-list (defun ros-01::infix-list->rpn-list) (#2# . 24813) (ros-01::infix-list) ros-01::infix-list ros-01::op-stack ros-01::res-stack "(" ")" ros-01::prev #:g2042 "(" "(" "^" "(" #:g2050 ros-01::op nreverse #Y(ros-01::infix-list->rpn-list nil nil (24 45 455 26 77 77 46 456 46 457 10 2 45 199 38 270 10 0 4 45 448 13 0 1 458 17 441 39 10 13 0 10 3 3 51 3 38 241 13 0 1 459 17 441 39 58 75 45 460 57 79 61 2 2 44 10 5 45 461 10 0 4 12 10 0 5 51 0 10 0 51 6 22 43 1 51 1 13 1 1 462 17 441 39 4 35 0 1 13 1 10 4 3 51 4 35 0 0 62 43 1 38 176 13 0 19 1 444 39 162 10 3 76 39 10 13 0 10 3 3 51 3 38 146 10 3 4 45 460 13 0 1 463 17 441 39 10 13 1 10 4 3 51 4 38 122 13 1 1 464 17 441 39 10 13 1 10 4 3 51 4 38 105 13 1 13 0 19 2 434 39 10 13 1 10 4 3 51 4 38 87 75 45 460 57 79 61 2 2 68 10 6 4 51 1 10 6 76 39 4 35 0 1 13 1 1 465 17 441 76 76 39 4 35 0 1 13 3 13 1 19 2 434 76 76 39 4 35 0 1 10 6 45 466 10 0 4 12 10 0 5 51 0 10 0 51 7 43 1 10 5 3 51 5 35 0 0 13 3 10 6 3 51 6 62 43 1 43 1 38 8 13 0 10 2 3 51 2 10 1 5 51 1 43 1 10 0 40 -272 75 45 448 10 3 45 199 38 20 10 0 4 45 467 13 0 10 4 3 51 4 10 1 5 51 1 43 1 10 0 40 -22 43 1 10 2 16 468 43 1 43 1 43 2 29) #1# #2# 24813) ros-01::tokenize (defun ros-01::tokenize) (#2# . 26230) (ros-01::str) " " #Y(ros-01::tokenize nil nil (24 45 102 26 13 0 14 195 15 474 19 3 197 29) #1# #2# 26230) ros-01::*shunting-data* "3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3" (defparameter ros-01::*shunting-data*) (#2# . 26295) ros-01::shunting-main (defun ros-01::shunting-main) (#2# . 26361) "~%~{~A~^ ~}" #Y(ros-01::shunting-main nil nil (26 14 476 19 1 470 45 455 14 131 15 483 13 0 19 1 451 12 19 3 181 43 1 29) #1# #2# 26361) ros-01::*node-list* (defparameter ros-01::*node-list*) (#2# . 26506) ros-01::*node-dict* make-hash-table (defparameter ros-01::*node-dict*) (#2# . 32520) ros-01::reset-collections (defun ros-01::reset-collections) (#2# . 32583) clrhash #Y(ros-01::reset-collections nil nil (26 75 52 485 11 488 16 495 29) #1# #2# 32583) ros-01::color (defun ros-01::color) (#2# . 32664) (ros-01::node) ros-01::node ros-01::entry :color "Node ~S not in *node-dict* ~%~
               COLOR" #Y(ros-01::color nil nil (24 45 501 26 13 0 14 488 19 2 95 45 502 10 0 39 10 14 503 13 0 19 2 95 38 8 15 504 13 1 19 2 154 43 1 29) #1# #2# 32664) ros-01::set-color (defun ros-01::set-color) (#2# . 32863) (ros-01::node ros-01::color) "Node ~S not in *node-dict*" si::assert-failure si::hash-set #Y(ros-01::set-color nil nil (24 45 501 24 45 497 26 13 1 14 488 19 2 95 45 502 38 12 15 502 77 77 15 510 13 2 19 5 511 10 0 76 40 -15 14 503 13 0 13 1 19 3 512 43 1 29) #1# #2# 32863) (defsetf ros-01::color) (#2# . 33049) si::do-defsetf ros-01::neighbors (defun ros-01::neighbors) (#2# . 33076) (ros-01::node) :neighbors "Node ~S not in *node-dict* ~%~
                NEIGHBORS" #Y(ros-01::neighbors nil nil (24 45 501 26 13 0 14 488 19 2 95 45 502 10 0 39 10 14 521 13 0 19 2 95 38 8 15 522 13 1 19 2 154 43 1 29) #1# #2# 33076) ros-01::add-edge (defun ros-01::add-edge) (#2# . 33287) (ros-01::a ros-01::b) ros-01::a ros-01::b #:g2073 #:g2071 #:g2072 #:g2076 #:g2074 #:g2075 ros-01::ok #Y(ros-01::add-edge nil nil (24 45 528 24 45 529 26 10 0 45 530 13 2 14 488 19 2 95 45 531 13 1 14 521 13 0 19 2 95 3 45 532 14 521 13 1 13 0 19 3 512 43 3 10 1 45 533 13 1 14 488 19 2 95 45 534 13 1 14 521 13 0 19 2 95 3 45 535 14 521 13 1 13 0 19 3 512 43 3 1 536 73 29) #1# #2# 33287) ros-01::degree-of-saturation (defun ros-01::degree-of-saturation) (#2# . 33483) (ros-01::node) ros-01::dos ros-01::neighbor plusp #:g2080 #Y(nil nil nil (24 45 543 26 13 0 19 1 497 16 544 73 39 17 8 1 45 545 13 2 13 0 19 2 80 51 2 73 43 1 29) #1# #2# 33483) mapc #Y(ros-01::degree-of-saturation nil nil (24 45 501 26 9 0 13 0 19 1 517 12 46 517 46 542 10 1 39 9 34 546 12 13 1 19 2 547 10 0 73 43 2 29) #1# #2# 33483) ros-01::next-node (defun ros-01::next-node) (#2# . 33794) #Y(nil nil nil (24 45 501 26 13 0 19 1 497 16 544 29) #1# #2# 33794) remove-if ros-01::candidates ros-01::max-sat ros-01::best ros-01::cur-sat #Y(ros-01::next-node nil nil (26 1 552 12 14 485 19 2 553 45 554 10 0 73 39 114 10 0 4 12 10 0 4 12 19 1 538 12 46 555 46 556 10 2 5 45 199 38 75 10 0 4 45 501 13 0 19 1 538 45 557 13 0 13 4 19 2 132 39 11 10 0 51 4 10 1 51 3 38 35 13 0 13 4 19 2 124 39 26 13 1 19 1 517 16 119 12 13 3 19 1 517 16 119 12 19 2 132 39 5 10 1 51 3 43 1 10 1 5 51 1 43 1 10 0 40 -77 75 45 501 10 2 73 43 1 43 1 43 2 43 1 29) #1# #2# 33794) ros-01::assign-color (defun ros-01::assign-color) (#2# . 34610) (ros-01::node) max 1+ #Y(ros-01::assign-color nil nil (24 45 501 26 13 0 19 1 517 45 517 13 1 10 0 39 20 33 563 12 33 497 12 13 0 19 2 207 12 19 2 86 16 564 38 4 8 1 73 12 19 2 506 43 1 29) #1# #2# 34610) ros-01::color-all (defun ros-01::color-all) (#2# . 34822) some #Y(ros-01::color-all nil nil (26 57 79 61 2 2 32 33 120 12 33 497 12 14 485 19 2 207 12 19 2 569 76 39 4 35 0 1 19 0 549 12 19 1 559 35 0 0 62 1 536 73 29) #1# #2# 34822) ros-01::edge-string->list (defun ros-01::edge-string->list) (#2# . 34977) (ros-01::edge-string) ros-01::edge-string "-" #Y(nil nil nil (24 45 448 26 13 0 14 195 15 576 19 3 197 29) #1# #2# 34977) " " #Y(ros-01::edge-string->list nil nil (24 45 575 26 1 577 12 13 0 14 195 15 578 19 3 197 12 19 2 207 29) #1# #2# 34977) ros-01::populate-collections (defun ros-01::populate-collections) (#2# . 35185) (ros-01::edge-string) ros-01::edges ros-01::edge second #Y(nil nil nil (24 45 585 26 10 0 4 12 10 0 16 586 12 46 529 46 528 13 0 14 485 14 440 33 441 12 19 4 127 76 39 29 13 0 11 485 3 52 485 13 0 14 488 33 441 12 14 503 9 0 14 521 77 19 5 57 12 19 3 512 10 1 73 39 51 13 1 14 485 14 440 33 441 12 19 4 127 76 39 29 13 1 11 485 3 52 485 13 1 14 488 33 441 12 14 503 9 0 14 521 77 19 5 57 12 19 3 512 13 0 13 1 19 2 524 43 2 29) #1# #2# 35185) string< sort #Y(ros-01::populate-collections nil nil (24 45 575 26 19 0 492 13 0 19 1 571 45 584 1 587 12 13 0 19 2 547 14 485 33 588 12 19 2 589 52 485 11 485 73 43 1 29) #1# #2# 35185) ros-01::color-main (defun ros-01::color-main) (#2# . 36194) ("0-1 1-2 2-0 3" "1-6 1-7 1-8 2-5 2-7 2-8 3-5 3-6 3-8 4-5 4-6 4-7" "1-4 1-6 1-8 3-2 3-6 3-8 5-2 5-4 5-8 7-2 7-4 7-6" "1-6 7-1 8-1 5-2 2-7 2-8 3-5 6-3 3-8 4-5 4-6 4-7") ros-01::cases case "~&~A:~%" "~&~{~A~^ ~}~%" #Y(nil nil nil (24 45 501 26 13 0 13 0 19 1 497 6 2 73 29) #1# #2# 36194) #Y(ros-01::color-main nil nil (26 1 594 45 595 10 0 45 199 38 46 10 0 4 45 596 13 0 19 1 580 19 0 566 14 131 15 597 13 0 19 3 181 14 131 15 598 1 599 12 14 485 19 2 207 12 19 3 181 10 1 5 51 1 43 1 10 0 40 -48 75 73 43 1 43 1 29) #1# #2# 36194) ros-01::*first-primes* (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 447 461 463 467 479 487 491 499 503 509 521 523 541) (defparameter ros-01::*first-primes*) (#2# . 36730) ros-01::*biggest-first-prime* (defparameter ros-01::*biggest-first-prime*) (#2# . 38728) ros-01::square (defun ros-01::square) (#2# . 38770) (ros-01::x) ros-01::x #Y(ros-01::square nil nil (24 45 612 26 13 0 13 0 19 2 73 29) #1# #2# 38770) ros-01::primep (defun ros-01::primep) (#2# . 38800) (ros-01::n) <= find isqrt ros-01::limit ros-01::p mod ros-01::div #Y(ros-01::primep nil nil (24 45 72 26 57 614 60 218 10 1 16 161 76 40 8 13 1 9 2 19 2 82 39 5 75 73 38 197 13 1 14 605 19 2 618 39 10 13 1 14 601 19 2 619 38 179 13 1 14 605 19 1 608 12 19 2 618 39 75 10 1 16 620 16 564 45 621 11 601 45 199 38 43 10 0 4 45 622 13 0 13 2 19 2 187 39 8 11 131 73 36 3 38 15 13 4 10 0 17 623 16 120 39 5 75 73 36 3 10 1 5 51 1 43 1 10 0 40 -45 75 45 622 11 131 73 43 1 43 1 43 1 38 92 11 601 45 199 38 27 10 0 4 45 622 13 3 10 0 17 623 16 120 39 5 75 73 36 2 10 1 5 51 1 43 1 10 0 40 -29 43 1 10 1 16 620 16 564 12 9 547 46 624 46 621 38 25 13 3 10 1 17 623 16 120 39 5 75 73 36 2 13 1 9 2 19 2 80 12 53 1 13 1 13 0 19 2 187 39 -32 11 131 73 43 2 63 29) #1# #2# 38800) ros-01::prime-decomposition (defun ros-01::prime-decomposition) (#2# . 39452) (ros-01::n) (numberp ros-01::n) numberp ros-01::build-decomposition #Y(ros-01::prime-decomposition nil nil (24 45 72 26 38 6 15 630 19 1 511 10 0 16 631 76 40 -11 10 0 16 161 76 40 8 13 0 9 2 19 2 82 39 5 75 73 38 23 13 0 19 1 614 39 8 10 0 6 1 73 38 9 13 0 9 2 77 19 3 632 29) #1# #2# 39452) (defun ros-01::build-decomposition) (#2# . 39656) (ros-01::n ros-01::prime ros-01::results) ros-01::prime ros-01::results "Something went wrong with build-decomposition" ros-01::divides / ros-01::next-prime #Y(ros-01::build-decomposition nil nil (24 45 72 24 45 637 24 45 638 26 13 2 9 1 19 2 124 39 7 10 0 16 468 38 60 13 1 13 2 19 2 132 39 8 15 639 19 1 154 38 44 13 1 13 2 19 2 640 39 22 13 2 13 1 19 2 641 12 13 1 13 1 10 0 3 12 19 3 632 38 14 13 2 13 1 19 1 642 12 13 0 19 3 632 29) #1# #2# 39656) (defun ros-01::next-prime) (#2# . 40030) (ros-01::p) position nth ros-01::new-p #Y(ros-01::next-prime nil nil (24 45 622 26 13 0 14 605 19 2 82 39 17 13 0 14 601 19 2 647 16 564 12 11 601 17 648 38 34 13 0 9 2 19 2 80 45 649 38 11 13 0 9 2 19 2 80 12 53 0 13 0 19 1 614 39 -16 10 0 73 43 1 29) #1# #2# 40030) (defun ros-01::divides) (#2# . 40234) (ros-01::n ros-01::m) ros-01::m #Y(ros-01::divides nil nil (24 45 72 24 45 654 26 13 0 10 1 17 623 16 120 29) #1# #2# 40234) ros-01::construct-triangle (defun ros-01::construct-triangle) (#2# . 40277) (ros-01::n) ros-01::result #A(t (1) (1)) #A(t (2) (1 1)) :element-type make-array ros-01::next-row si::aset #:loop-limit2167 aref #Y(ros-01::crec nil nil (24 45 660 24 45 654 26 13 0 13 3 19 2 124 39 7 10 1 16 468 38 186 13 0 9 1 19 2 124 39 20 15 661 10 1 3 51 1 12 10 0 16 564 12 32 2 18 2 38 158 13 0 9 2 19 2 124 39 20 15 662 10 1 3 51 1 12 10 0 16 564 12 32 2 18 2 38 130 10 1 4 12 13 0 14 663 15 185 19 3 664 12 46 665 46 460 13 1 9 0 9 1 19 3 666 13 1 10 2 16 134 12 9 1 19 3 666 9 1 10 2 16 134 12 46 667 46 74 57 79 61 2 2 52 13 1 13 2 19 2 187 39 4 35 0 1 13 4 13 1 13 3 10 1 16 134 12 19 2 668 12 13 3 13 1 19 2 668 12 19 2 80 12 19 3 666 10 1 16 564 51 1 35 0 0 62 43 2 13 1 10 3 3 51 3 12 10 2 16 564 12 32 4 18 2 43 2 29) #1# #2# 40277) #Y(ros-01::construct-triangle nil nil (24 45 72 26 13 0 9 1 19 2 82 39 5 75 73 38 25 10 0 16 564 12 19 1 183 45 621 31 1 669 77 9 1 32 0 18 2 43 1 43 1 29) #1# #2# 40277) ros-01::print-triangle-lines (defun ros-01::print-triangle-lines) (#2# . 42869) (ros-01::line-list) ros-01::line-list #:loop-across-list2186 #:loop-across-index-2185 #:loop-across-vector-2184 "~D " terpri #Y(ros-01::print-triangle-lines nil nil (24 45 675 26 10 0 45 199 38 85 10 0 4 45 200 77 13 0 9 0 9 0 46 676 46 677 46 678 46 108 57 79 61 2 8 46 10 2 16 119 51 4 13 3 13 4 19 2 187 39 4 35 0 1 13 2 13 3 19 2 668 51 1 10 3 16 564 51 3 14 131 15 679 13 1 19 3 181 35 0 0 62 43 4 19 0 680 10 1 5 51 1 43 1 10 0 40 -87 75 73 43 1 29) #1# #2# 42869) ros-01::pascal-main (defun ros-01::pascal-main) (#2# . 43025) (-15 0 1 4 10 25 4.3) "~&~%n: ~A~%~%" #Y(ros-01::pascal-main nil nil (26 1 685 45 199 38 31 10 0 4 45 72 14 131 15 686 13 0 19 3 181 13 0 19 1 656 12 19 1 671 10 1 5 51 1 43 1 10 0 40 -33 75 73 43 1 29) #1# #2# 43025) ros-01::nth-line (defun ros-01::nth-line) (#2# . 43176) (ros-01::n ros-01::path) ros-01::path open #:loop-limit2188 read-line close :abort #Y(ros-01::nth-line nil nil (24 45 72 24 45 692 26 13 0 19 1 693 45 289 64 73 58 60 58 9 0 13 3 46 694 46 74 75 45 200 57 79 61 2 2 29 13 2 13 3 19 2 132 39 4 35 0 1 13 5 19 1 695 51 1 10 2 16 564 51 2 35 0 0 10 1 73 36 4 62 73 43 1 43 2 63 69 10 0 39 6 13 0 19 1 696 70 65 10 0 39 10 13 0 14 697 14 131 19 3 696 66 43 1 29) #1# #2# 43176) ros-01::file-line-main (defun ros-01::file-line-main) (#2# . 44525) "quicklisp/local-projects/rosetta/trial-file.lisp" ros-01::file "~&Reading the 5th line of our file:" "~&~A" "~&Supplying an illegal line number (50 with fewer than 50 ~%~
            lines in the file:~%" #:g2195 #:g2196 end-of-file si::temp #Y(nil nil nil (24 45 710 26 10 0 51 2 35 1 0 29) #1# #2# 44525) si::*handler-clusters* ros-01::eof "~&~A" "~&Supplying a non-existent file:~%" #:g2198 #:g2199 file-error #Y(nil nil nil (24 45 710 26 10 0 51 2 35 1 0 29) #1# #2# 44525) "no-such-file.text" ros-01::fe "~&~A" #Y(ros-01::file-line-main nil nil (26 1 702 45 703 14 131 15 704 19 2 181 14 131 15 705 9 5 13 0 19 2 688 12 19 3 181 14 131 15 706 19 2 181 57 707 60 54 75 45 708 57 79 61 1 25 15 709 34 711 3 6 1 12 11 712 3 48 712 9 50 13 3 19 2 688 36 2 44 1 10 1 45 713 14 131 15 714 13 0 19 3 181 43 1 36 2 62 43 1 63 14 131 15 715 19 2 181 57 716 60 54 75 45 717 57 79 61 1 25 15 718 34 719 3 6 1 12 11 712 3 48 712 9 10 15 720 19 2 688 36 2 44 1 10 1 45 721 14 131 15 722 13 0 19 3 181 43 1 36 2 62 43 1 63 0 43 1 29) #1# #2# 44525) ros-01::integral-part (defun ros-01::integral-part) (#2# . 45101) (ros-01::nstr) ros-01::nstr integer #Y(ros-01::integral-part nil nil (24 45 728 26 13 0 14 130 14 131 19 3 123 45 729 10 0 39 6 10 0 73 38 4 8 0 73 43 1 29) #1# #2# 45101) "Given a string containing a coerced
  float, return the integral portion 
  as an integer." ros-01::fractional-part (defun ros-01::fractional-part) (#2# . 46903) (ros-01::nstr) ros-01::decimal-pt-pos alpha-char-p position-if ros-01::decimal-subseq expt #Y(ros-01::fractional-part nil nil (24 45 728 26 15 128 13 0 19 2 647 45 736 10 0 39 14 10 1 16 119 12 10 0 16 564 12 19 2 132 39 44 13 1 10 0 16 564 12 33 737 12 13 1 19 2 738 12 19 3 111 45 739 13 0 19 1 123 12 9 10 10 0 16 119 17 740 12 19 2 641 43 1 38 4 8 0 73 43 1 29) #1# #2# 46903) "Given a string which contains a coerced
  float, return the fractional part as 
  a ratio." ros-01::power-multiplier (defun ros-01::power-multiplier) (#2# . 47500) (ros-01::nstr) ros-01::exp-marker-position #Y(ros-01::power-multiplier nil nil (24 45 728 26 33 737 12 13 0 19 2 738 45 747 10 0 39 14 10 1 16 119 12 10 0 16 564 12 19 2 132 39 21 9 10 13 1 10 0 16 564 12 19 2 111 12 19 1 123 17 740 38 4 8 1 73 43 1 29) #1# #2# 47500) "Given a string containing a coerced
  float, return the integer or fraction
  that is the power of 10 in the exponentional
  part of the float. Examples:
  (power-multiplier \"123.456e3\") => 1000
  (power-multiplier \"123.456e-3\") => 1/1000
  (power-multiplier \"123.456\") => 1." ros-01::rationalize* (defun ros-01::rationalize*) (#2# . 48128) (ros-01::x) (or (stringp ros-01::x) (realp ros-01::x)) "'rationalize accepts only reals or
    strings, not ~
    ~A ~A." type-of stringp realp rationalp "~A" ros-01::sign #\- #\+ #Y(ros-01::rationalize* nil nil (24 45 612 26 38 17 15 754 77 77 15 755 10 0 16 756 12 13 0 19 6 511 10 0 16 757 40 5 10 0 16 758 76 40 -28 10 0 16 759 39 6 10 0 73 38 92 10 0 16 757 39 6 10 0 73 38 9 77 15 760 13 0 19 3 181 12 9 1 46 761 46 102 13 0 8 0 17 125 42 762 16 8 -1 51 1 13 0 9 1 19 2 111 51 0 38 13 42 763 10 13 0 9 1 19 2 111 51 0 13 1 13 0 19 1 724 12 13 0 19 1 732 12 19 2 80 12 13 0 19 1 743 12 19 3 73 43 2 29) #1# #2# 48128) "Given a real number, or 
  a string containing one, coerce the
  written representation precisely
  to a fraction (or integer).
  Note that the initial rationale 
  for this function was to supplement
  the built-in rationalize function, 
  which is broken in this implementation." ros-01::c-frac (#3="Struct that represents a continued
  fraction." (ros-01::integral 0 :type integer) (ros-01::fractional nil :type #4=(list integer)) (ros-01::repeatingp nil :type boolean) (ros-01::repeat-start nil :type #5=(or integer null)) (ros-01::repeat-end nil :type #6=(or integer null))) ((ros-01::integral 0 integer nil 0 nil) (ros-01::fractional nil #4# nil 1 nil) (ros-01::repeatingp nil boolean nil 2 nil) (ros-01::repeat-start nil #5# nil 3 nil) (ros-01::repeat-end nil #6# nil 4 nil)) ros-01::copy-c-frac (ros-01::make-c-frac) #3# ros-01::c-frac-p si::define-structure #7=(ros-01::c-frac (:conc-name nil)) (defstruct #7#) (#2# . 48989) ros-01::make-c-frac (defun ros-01::make-c-frac) (#2# . 48989) (&key (#8=#:integral 0) #9=#:fractional #10=#:repeatingp #11=#:repeat-start #12=#:repeat-end) (nil :repeat-end :repeat-start :repeatingp :fractional :integral) #8# #9# #10# #11# #12# (or integer null) typep (or integer null) ros-01::repeat-end si::structure-type-error (or integer null) (or integer null) ros-01::repeat-start boolean ros-01::repeatingp (or cons null) (list integer) ros-01::fractional ros-01::integral 0 si::make-structure #Y(ros-01::make-c-frac nil nil (28 781 22 40 3 9 0 46 782 22 40 2 77 46 783 22 40 2 77 46 784 22 40 2 77 46 785 22 40 2 77 46 786 13 0 15 787 19 2 788 76 39 12 13 0 15 789 15 766 15 790 19 4 791 13 1 15 792 19 2 788 76 39 12 13 1 15 793 15 766 15 794 19 4 791 13 2 15 795 19 2 788 76 39 12 13 2 15 795 15 766 15 796 19 4 791 13 3 15 797 19 2 788 76 39 12 13 3 15 798 15 766 15 799 19 4 791 13 4 15 729 19 2 788 76 39 12 13 4 15 729 15 766 15 800 19 4 791 15 801 13 4 13 3 13 2 13 1 13 0 19 6 802 29) #1# #2# 48989) find-class symbol-package package ext::package-locked-p si::*ignore-package-locks* package-error "Ignore lock and proceed." "Attempt to define CAS accessor ~S in locked package." (ros-01::repeat-end) :package si::signal-simple-error mp::cas-expander #:g2212 si::x si::new si::old mp::compare-and-swap-structure si::structure-ref #Y(nil nil nil (24 45 816 24 45 817 26 19 0 399 12 19 0 399 12 46 818 46 819 77 77 13 0 13 1 15 820 13 2 15 292 1 766 6 2 12 9 4 13 0 10 1 6 6 12 15 821 13 2 15 292 1 766 6 2 12 8 4 6 4 12 72 6 43 2 29) #1# #2# 48989) si::put-sysprop (ros-01::repeat-start) #:g2213 #Y(nil nil nil (24 45 825 24 45 817 26 19 0 399 12 19 0 399 12 46 818 46 819 77 77 13 0 13 1 15 820 13 2 15 292 1 766 6 2 12 9 3 13 0 10 1 6 6 12 15 821 13 2 15 292 1 766 6 2 12 8 3 6 4 12 72 6 43 2 29) #1# #2# 48989) (ros-01::repeatingp) #:g2214 #Y(nil nil nil (24 45 828 24 45 817 26 19 0 399 12 19 0 399 12 46 818 46 819 77 77 13 0 13 1 15 820 13 2 15 292 1 766 6 2 12 9 2 13 0 10 1 6 6 12 15 821 13 2 15 292 1 766 6 2 12 8 2 6 4 12 72 6 43 2 29) #1# #2# 48989) (ros-01::fractional) #:g2215 #Y(nil nil nil (24 45 831 24 45 817 26 19 0 399 12 19 0 399 12 46 818 46 819 77 77 13 0 13 1 15 820 13 2 15 292 1 766 6 2 12 9 1 13 0 10 1 6 6 12 15 821 13 2 15 292 1 766 6 2 12 8 1 6 4 12 72 6 43 2 29) #1# #2# 48989) (ros-01::integral) #:g2216 #Y(nil nil nil (24 45 834 24 45 817 26 19 0 399 12 19 0 399 12 46 818 46 819 77 77 13 0 13 1 15 820 13 2 15 292 1 766 6 2 12 9 0 13 0 10 1 6 6 12 15 821 13 2 15 292 1 766 6 2 12 8 0 6 4 12 72 6 43 2 29) #1# #2# 48989) ros-01::float->c-frac (defun ros-01::float->c-frac) (#2# . 49269) (ros-01::x) #Y(ros-01::rec nil nil (24 45 179 26 10 0 16 161 39 8 10 0 6 1 73 38 27 13 0 19 1 183 47 1 799 45 800 13 0 13 1 19 1 641 12 32 3 18 1 3 73 43 2 29) #1# #2# 49269) ratio :integral :fractional ros-01::integ #Y(ros-01::float->c-frac nil nil (24 45 612 26 31 1 840 13 1 19 1 750 45 841 10 0 16 161 39 17 14 842 13 0 14 843 8 0 6 1 12 19 4 777 38 73 13 0 19 1 183 47 1 184 45 844 10 1 16 544 39 23 14 842 13 0 14 843 13 1 19 1 641 12 32 3 18 1 12 19 4 777 38 33 14 842 13 0 9 1 19 2 81 12 14 843 13 1 9 1 19 2 80 12 19 1 641 12 32 3 18 1 12 19 4 777 43 2 43 1 43 1 29) #1# #2# 49269) "Given a float, returns the longer
  continued fraction representation 
  as a c-frac." ros-01::pos-c-frac-reciprocal (defun ros-01::pos-c-frac-reciprocal) (#2# . 50226) (ros-01::c-frac) division-by-zero make-condition ros-01::dbz minusp "POS-C-FRAC-RECIPROCAL takes only positive c-fracs." #Y(ros-01::pos-c-frac-reciprocal nil nil (24 45 766 26 13 0 19 1 800 16 120 39 24 13 0 19 1 799 16 119 12 9 1 19 2 124 39 9 13 0 19 1 799 4 16 120 39 17 15 851 19 1 852 45 853 13 0 19 1 154 43 1 38 71 13 0 19 1 800 16 854 39 8 15 855 19 1 154 38 55 13 0 19 1 800 16 120 39 24 14 842 13 0 19 1 799 4 12 14 843 13 0 19 1 799 5 12 19 4 777 38 23 14 842 9 0 14 843 13 0 19 1 800 12 13 0 19 1 799 3 12 19 4 777 29) #1# #2# 50226) "Given a positive continued fraction object, 
  return the continued fraction of the 
  reciprocal. If the c-frac is repeating,
  return an approximation. Signals an error if the
  value of the c-frac is 0." ros-01::binary-frac (defun ros-01::binary-frac) (#2# . 51077) (ros-01::digit-list &optional (ros-01::precision 500)) ros-01::digit-list ros-01::precision ros-01::rest-prec ros-01::1st-digit ros-01::bits si::%dotimes-var #:g2240 copy-seq ros-01::rp ros-01::rest-digits bit #:g2249 #:g2251 #:g2250 rplaca #Y(ros-01::binary-frac nil nil (24 45 862 25 40 3 9 500 46 863 26 77 10 1 4 12 13 0 46 864 46 865 46 866 13 1 13 2 19 2 187 39 8 8 0 6 1 73 38 158 10 1 16 134 45 867 8 0 45 146 38 29 9 0 10 2 3 51 2 8 1 45 868 13 5 13 0 19 2 81 51 5 43 1 10 0 16 564 51 0 13 0 13 1 19 2 82 40 -36 43 2 9 1 10 4 5 16 869 12 13 2 46 870 46 871 46 872 38 72 10 1 4 16 120 39 22 10 1 5 51 1 10 0 16 120 39 5 8 1 38 3 8 0 51 0 38 37 10 1 45 873 8 1 45 874 10 1 4 12 13 0 19 2 81 45 875 13 2 10 0 17 876 10 0 43 3 13 0 10 3 3 51 3 10 2 16 134 12 53 2 10 2 16 120 40 4 10 1 76 39 -81 10 3 16 468 43 3 43 3 29) #1# #2# 51077) "Given a list of decimal digits, which
  are the fractional digits of a simple
  continued fraction, return a list of 
  alternating runs of 0's and 1's such
  that the initial run is of zeros, and each
  run has a length equal to the corresponding
  digit in digit list, with the exception of
  the first run, which has one fewer 0. Examples
  (binary-frac (2 3 4)) -> (0 1 1 1 0 0 0 0)
  (binary-frac (1 1 1 1)) -> (1 0 1)" ros-01::repeating-frac (defun ros-01::repeating-frac) (#2# . 52352) (ros-01::c-frac &optional (ros-01::prec (max 9 (* (apply (function +) (ros-01::fractional ros-01::c-frac)) 2)))) ros-01::prec ros-01::repeated ros-01::zero-count #:g2282 rest #:g2297 #:g2298 #:g2300 #:g2299 #Y(ros-01::repeating-frac nil nil (24 45 766 25 40 26 9 9 33 80 12 13 0 19 1 799 12 19 2 86 12 9 2 19 2 73 12 19 2 563 12 46 883 26 13 1 19 1 799 45 799 13 2 19 1 799 12 13 2 19 1 794 12 13 2 19 1 790 12 19 3 111 45 884 75 45 866 10 3 45 864 10 3 4 16 134 45 885 38 30 9 0 10 2 3 51 2 8 1 45 886 13 2 13 0 19 2 81 51 2 43 1 10 0 16 134 12 53 0 10 0 16 120 40 8 14 887 13 5 19 2 120 39 -43 43 1 10 3 5 16 869 12 9 1 46 872 46 871 38 93 10 0 76 39 9 10 4 16 869 51 0 38 80 10 0 4 16 120 39 22 10 0 5 51 0 10 1 16 120 39 5 8 1 38 3 8 0 51 1 38 52 13 1 10 3 3 51 3 8 1 45 888 13 3 13 0 19 2 81 51 3 43 1 10 0 45 889 8 1 45 890 10 1 4 12 13 0 19 2 81 45 891 13 2 10 0 17 876 10 0 43 3 10 2 16 120 39 -97 10 3 16 468 43 2 43 4 29) #1# #2# 52352) "Given a c-frac representing an 
  irrational number and an optional number 
  of digits of precision,
  return a ratio approximation
  of the fractional part of the c-frac." ros-01::binary-frac->decimal-ratio (defun ros-01::binary-frac->decimal-ratio) (#2# . 53639) (ros-01::bit-list) ros-01::bit-list 1/2 copy-list ros-01::rest-bits ros-01::power #:g2308 #Y(ros-01::binary-frac->decimal-ratio nil nil (24 45 898 26 15 899 9 0 10 0 16 900 12 46 901 46 841 46 902 38 40 10 2 4 16 120 76 39 16 10 0 45 903 13 2 13 0 19 2 80 51 2 43 1 13 0 9 2 19 2 641 12 10 2 5 12 53 2 53 0 10 2 76 39 -43 10 1 73 43 3 29) #1# #2# 53639) "Given a list of bits representing the 
  fractional part of the ? function, return
  the equivalent decimal ratio." ros-01::binary-transform (defun ros-01::binary-transform) (#2# . 54025) (ros-01::c-frac) #Y(ros-01::binary-transform nil nil (24 45 766 26 13 0 19 1 799 45 799 13 1 19 1 796 39 12 13 1 19 1 879 12 19 1 894 38 10 13 0 19 1 858 12 19 1 894 43 1 29) #1# #2# 54025) "Transform the fractional digits of 
  a continued fraction to a ratio that is
  transform specified for these digits by
  the Minkowski ? function." ros-01::? (defun ros-01::?) (#2# . 54427) (ros-01::x) #Y(ros-01::? nil nil (24 45 612 26 13 0 19 1 836 45 766 13 0 19 1 800 12 13 0 19 1 906 12 19 2 80 43 1 29) #1# #2# 54427) "Minkowski's ? function." ros-01::frac->bit-list (defun ros-01::frac->bit-list) (#2# . 54579) (ros-01::x &optional (ros-01::e #13=1.0d-100)) #13# ros-01::e #:g2322 #Y(ros-01::frac->bit-list nil nil (24 45 612 25 40 3 15 922 46 923 26 13 1 19 1 750 12 15 899 77 46 866 46 902 46 841 38 51 13 0 13 1 19 2 187 39 25 10 1 45 924 13 1 13 0 19 2 81 51 1 43 1 9 1 10 2 3 51 2 38 8 9 0 10 2 3 51 2 13 1 9 2 19 2 641 12 53 1 10 0 16 120 40 8 13 1 13 3 19 2 82 39 -64 10 2 16 468 43 3 29) #1# #2# 54579) "Given a fractional number, 
  0 <= x < 1, return a list of 
  binary digits for the number." ros-01::bit-list->run-list (defun ros-01::bit-list->run-list) (#2# . 55019) (ros-01::bit-list) ros-01::run-list ros-01::run-length+1 ros-01::rb ros-01::run-length /= #Y(ros-01::bit-list->run-list nil nil (24 45 898 26 77 10 0 16 900 12 46 901 46 931 8 1 45 932 38 13 10 2 5 51 2 10 0 16 564 12 53 0 10 2 76 40 10 10 2 4 12 9 1 19 2 124 39 -27 13 0 10 1 3 51 1 43 1 9 0 13 1 9 1 46 872 46 933 46 934 38 50 10 1 4 12 13 2 19 2 935 39 26 13 0 10 3 3 51 3 8 0 51 0 10 2 16 120 39 5 8 1 38 3 8 0 51 2 10 0 16 564 12 10 1 5 12 53 1 53 0 10 1 76 39 -53 13 0 10 3 3 51 3 10 3 16 468 43 3 43 2 29) #1# #2# 55019) "Given a list of bits, return a list
  of decimal numbers corresponding to runs
  of bits. The first number will be the 
  (number of initial 0's) + 1. The next
  number with be the number of the next
  consecutive 1's, then the third number
  with be the number of next consecutive 
  0's, until the bit-list is exhausted." ros-01::num->?-inverse-c-frac (defun ros-01::num->?-inverse-c-frac) (#2# . 56052) (ros-01::x) #Y(ros-01::num->?-inverse-c-frac nil nil (24 45 612 26 13 0 19 1 750 12 19 1 183 47 1 184 45 844 10 1 16 854 76 39 22 14 842 13 0 14 843 13 1 19 1 918 12 19 1 927 12 19 4 777 38 32 14 842 13 0 9 1 19 2 81 12 14 843 13 1 9 1 19 2 80 12 19 1 918 12 19 1 927 12 19 4 777 43 2 29) #1# #2# 56052) "Given a number, return a c-frac 
  containing a representation of the
  result of performing the inverse ? 
  function on x." ros-01::reverse-trim (defun ros-01::reverse-trim) (#2# . 56607) (ros-01::bits) ros-01::rev #Y(ros-01::reverse-trim nil nil (24 45 866 26 10 0 16 243 45 948 38 7 10 0 5 12 53 0 10 0 76 40 7 10 0 4 16 120 76 39 -18 10 0 73 43 1 29) #1# #2# 56607) "Given a list of bits, reverse it 
  and trim all initial zeros from 
  the reversed list" ros-01::c-frac->float (defun ros-01::c-frac->float) (#2# . 56842) (ros-01::c-frac) ros-01::rt ros-01::cur 0.0l0 #Y(ros-01::c-frac->float nil nil (24 45 766 26 13 0 19 1 799 12 19 1 944 45 955 10 0 4 45 956 10 0 45 841 38 24 10 2 5 51 2 10 2 4 51 1 13 1 13 0 19 1 641 12 19 2 80 51 0 10 2 5 76 39 -28 13 3 19 1 800 12 13 0 19 1 641 12 19 2 80 12 15 957 19 2 163 43 3 29) #1# #2# 56842) "Coerce a c-frac to a float" ros-01::?^-1 (defun ros-01::?^-1) (#2# . 57251) (ros-01::x) #Y(ros-01::?^-1 nil nil (24 45 612 26 13 0 19 1 938 12 19 1 951 29) #1# #2# 57251) "The inverse of Minkowski's ? function." (inline ros-01::next-mc ros-01::probe-candidate) proclaim ros-01::main-mc (defun ros-01::main-mc) (#2# . 58743) ros-01::mc-series ros-01::mc-array "First 30 elements:~%" ros-01::print-elts "~%Elements 90 to 100:~%" #Y(ros-01::main-mc nil nil (26 9 100 19 1 971 45 972 14 131 15 973 19 2 181 13 0 9 0 9 30 19 3 974 14 131 15 975 19 2 181 13 0 9 89 9 100 19 3 974 43 1 29) #1# #2# 58743) (defun ros-01::print-elts) (#2# . 58947) (array ros-01::start ros-01::end) array ros-01::line-len "~D " ros-01::item ros-01::i-len #:g2359 "~A" "~%~A" #Y(ros-01::print-elts nil nil (24 45 980 24 45 148 24 45 147 26 13 1 9 0 46 981 46 74 38 86 77 15 982 13 4 13 0 19 2 668 12 19 3 181 45 983 10 0 16 119 45 984 13 3 13 0 19 2 80 12 9 45 19 2 82 39 27 10 0 45 985 13 4 13 0 19 2 80 51 4 43 1 14 131 15 986 13 1 19 3 181 38 14 10 0 51 3 14 131 15 987 13 1 19 3 181 43 2 10 0 16 564 12 53 0 13 0 13 2 19 2 124 39 -93 75 73 43 2 29) #1# #2# 58947) "Print elements in an array from
  a start index (inclusive) to an 
  end index (exclusive). Prints elements
  to accommodate this phone screen, so
  that, if possible, each line will not 
  run over 45 characters." (defun ros-01::mc-series) (#2# . 59559) (ros-01::n) :fill-pointer ros-01::mc vector-push ros-01::sums ros-01::next-mc ros-01::new-sums iterate::next #Y(ros-01::mc-series nil nil (24 45 72 26 13 0 14 663 15 729 14 993 9 0 19 5 664 45 994 9 1 10 0 17 995 8 2 6 1 12 9 1 46 460 46 996 8 1 45 74 38 43 13 2 13 3 13 1 19 3 997 47 1 998 45 999 13 0 10 5 17 995 10 0 51 4 13 1 13 3 19 2 149 51 3 43 2 10 0 16 564 12 53 0 13 0 13 4 19 2 124 39 -50 10 3 73 43 1 43 2 43 1 29) #1# #2# 59559) "Given an integer n, return an array
  containing the first n elements of the
  Mian-Chowla sequence." (defun ros-01::next-mc) (#2# . 60109) (ros-01::prev ros-01::mc ros-01::sums) ros-01::candidate ros-01::probe-candidate ros-01::all-new-sums #Y(ros-01::next-mc nil nil (24 45 460 24 45 994 24 45 996 26 57 997 60 49 10 3 16 564 45 1005 38 33 13 0 13 3 13 2 19 3 1006 45 1007 10 0 39 9 13 1 13 0 72 2 36 2 43 1 10 0 16 564 12 53 0 75 39 -34 75 73 43 1 63 29) #1# #2# 60109) (defun ros-01::probe-candidate) (#2# . 60415) (ros-01::candidate ros-01::mc ros-01::sums) #:loop-across-list2371 #:loop-across-index-2370 #:loop-across-vector-2369 ros-01::mian iterate::sum #Y(ros-01::probe-candidate nil nil (24 45 1005 24 45 994 24 45 996 26 57 1006 60 124 75 45 998 58 60 115 77 13 4 9 0 9 0 46 1012 46 1013 46 1014 46 1015 75 45 1016 57 79 61 2 8 68 10 3 16 119 51 5 13 4 13 5 19 2 187 39 4 35 0 1 13 3 13 4 19 2 668 51 2 10 4 16 564 51 4 13 11 13 2 19 2 80 51 1 13 1 13 9 19 2 647 39 7 75 73 36 8 38 8 13 1 10 7 3 51 7 35 0 0 13 11 9 2 19 2 73 12 10 7 3 51 7 73 36 6 62 73 43 1 43 4 63 43 1 63 29) #1# #2# 60415))) #2# 0) #Y(si::bytecodes nil nil (1 2 16 3 14 4 9 2 14 5 9 20 14 6 9 12 14 7 9 144 14 8 9 1728 14 9 15 10 14 11 9 1000 14 12 15 13 14 14 15 15 14 16 15 17 14 18 15 19 14 20 15 21 14 22 15 23 14 24 15 25 14 26 15 27 14 28 15 29 14 30 15 31 14 32 15 33 14 34 9 1024 14 35 15 36 14 37 15 38 14 39 15 40 14 41 15 42 14 43 15 44 14 45 15 46 14 47 15 48 14 49 15 50 14 51 15 52 14 53 15 54 14 55 15 56 19 60 57 52 2 15 2 15 58 15 59 15 60 19 4 61 1 2 73 29) #1# #2# 39) #Y(si::bytecodes nil nil (1 62 16 3 1 63 52 62 15 62 15 58 15 64 15 65 19 4 61 1 62 73 29) #1# #2# 6303) #Y(si::bytecodes nil nil (15 66 15 58 15 67 15 68 19 4 61 15 66 14 69 77 15 70 19 4 61 15 66 34 88 12 19 2 89 1 66 73 29) #1# #2# 7029) #Y(si::bytecodes nil nil (15 90 15 58 15 91 15 92 19 4 61 15 90 14 69 77 15 93 19 4 61 15 90 34 97 12 19 2 89 1 90 73 29) #1# #2# 7163) #Y(si::bytecodes nil nil (15 98 15 58 15 99 15 100 19 4 61 15 98 14 69 77 15 101 19 4 61 15 98 1 113 12 19 2 89 1 98 73 29) #1# #2# 7253) #Y(si::bytecodes nil nil (15 114 15 58 15 115 15 116 19 4 61 15 114 14 69 77 15 117 19 4 61 15 114 1 138 12 19 2 89 1 114 73 29) #1# #2# 7705) #Y(si::bytecodes nil nil (15 139 15 58 15 140 15 141 19 4 61 15 139 14 69 77 15 142 19 4 61 15 139 1 155 12 19 2 89 1 139 73 29) #1# #2# 8996) #Y(si::bytecodes nil nil (15 156 15 58 15 157 15 158 19 4 61 15 156 14 69 77 15 159 19 4 61 15 156 1 164 12 19 2 89 1 156 73 29) #1# #2# 9853) #Y(si::bytecodes nil nil (15 165 15 58 15 166 15 167 19 4 61 15 165 14 69 77 15 168 19 4 61 15 165 1 170 12 19 2 89 1 165 73 29) #1# #2# 10058) #Y(si::bytecodes nil nil (1 171 16 3 1 172 52 171 15 171 15 58 15 173 15 174 19 4 61 1 171 73 29) #1# #2# 10255) #Y(si::bytecodes nil nil (15 175 15 58 15 176 15 177 19 4 61 15 175 14 69 77 15 178 19 4 61 15 175 1 191 12 19 2 89 1 175 73 29) #1# #2# 10596) #Y(si::bytecodes nil nil (15 192 15 58 15 193 15 194 19 4 61 15 192 14 69 77 77 19 4 61 15 192 1 208 12 19 2 89 1 192 73 29) #1# #2# 11193) #Y(si::bytecodes nil nil (33 209 52 210 73 29) #1# #2# 11657) #Y(si::bytecodes nil nil (1 211 16 3 75 52 211 15 211 15 212 15 213 19 3 214 15 211 15 58 15 215 15 216 19 4 61 1 211 73 29) #1# #2# 15969) #Y(si::bytecodes nil nil (15 217 1 218 17 219 15 217 15 212 15 220 19 3 214 15 217 15 58 15 221 15 222 19 4 61 1 217 73 29) #1# #2# 16113) #Y(si::bytecodes nil nil (15 223 15 58 15 224 15 225 19 4 61 15 223 14 69 77 77 19 4 61 15 223 1 227 12 19 2 89 15 223 15 228 15 229 19 3 214 1 223 73 29) #1# #2# 16320) #Y(si::bytecodes nil nil (15 230 15 58 15 231 15 232 19 4 61 15 230 14 69 77 15 233 19 4 61 15 230 1 245 12 14 131 9 1 19 4 89 1 230 73 29) #1# #2# 16500) #Y(si::bytecodes nil nil (15 246 15 58 15 247 15 248 19 4 61 15 246 14 69 77 15 249 19 4 61 15 246 34 252 12 19 2 89 15 246 15 228 15 253 19 3 214 1 246 73 29) #1# #2# 16781) #Y(si::bytecodes nil nil (15 254 15 58 15 255 15 256 19 4 61 15 254 14 69 77 15 257 19 4 61 15 254 1 264 12 14 131 9 3 19 4 89 15 254 15 228 15 265 19 3 214 1 254 73 29) #1# #2# 17042) #Y(si::bytecodes nil nil (15 266 15 58 15 267 15 268 19 4 61 15 266 14 69 77 15 269 19 4 61 15 266 1 274 12 14 131 9 2 19 4 89 15 266 15 228 15 275 19 3 214 1 266 73 29) #1# #2# 17240) #Y(si::bytecodes nil nil (15 276 15 58 15 277 15 278 19 4 61 15 276 14 69 77 15 279 19 4 61 15 276 1 295 12 14 131 9 3 19 4 89 15 276 15 228 15 296 19 3 214 1 276 73 29) #1# #2# 17886) #Y(si::bytecodes nil nil (15 297 15 58 15 298 15 299 19 4 61 15 297 14 69 77 15 300 19 4 61 15 297 1 306 12 14 131 9 3 19 4 89 15 297 15 228 15 307 19 3 214 1 297 73 29) #1# #2# 18334) #Y(si::bytecodes nil nil (15 308 15 58 15 309 15 310 19 4 61 15 308 14 69 77 15 311 19 4 61 15 308 1 317 12 14 131 9 1 19 4 89 15 308 15 228 15 318 19 3 214 1 308 73 29) #1# #2# 18616) #Y(si::bytecodes nil nil (15 319 15 58 15 320 15 321 19 4 61 15 319 14 69 77 15 322 19 4 61 15 319 1 327 12 14 131 9 2 19 4 89 15 319 15 228 15 328 19 3 214 1 319 73 29) #1# #2# 18924) #Y(si::bytecodes nil nil (15 329 15 58 15 330 15 331 19 4 61 15 329 14 69 77 15 332 19 4 61 15 329 1 336 12 14 131 9 2 19 4 89 15 329 15 228 15 337 19 3 214 1 329 73 29) #1# #2# 19035) #Y(si::bytecodes nil nil (15 338 15 58 15 339 15 340 19 4 61 15 338 14 69 77 77 19 4 61 15 338 1 346 12 14 131 9 1 19 4 89 15 345 15 58 15 347 15 348 19 4 61 15 345 14 69 77 15 349 19 4 61 15 345 34 362 12 19 2 89 1 345 73 29) #1# #2# 19170) #Y(si::bytecodes nil nil (15 363 15 58 15 364 15 365 19 4 61 15 363 14 69 77 77 19 4 61 15 363 1 370 12 14 131 9 1 19 4 89 15 369 15 58 15 371 15 372 19 4 61 15 369 14 69 77 15 373 19 4 61 15 369 1 379 12 19 2 89 1 369 73 29) #1# #2# 19455) #Y(si::bytecodes nil nil (15 380 15 58 15 381 15 382 19 4 61 15 380 14 69 77 15 383 19 4 61 15 380 1 389 12 14 131 9 2 19 4 89 15 380 15 228 15 390 19 3 214 1 380 73 29) #1# #2# 19784) #Y(si::bytecodes nil nil (15 391 15 58 15 392 15 393 19 4 61 15 391 14 69 77 15 394 19 4 61 15 391 1 402 12 14 131 9 3 19 4 89 15 391 15 228 15 403 19 3 214 1 391 73 29) #1# #2# 22081) #Y(si::bytecodes nil nil (15 404 15 58 15 405 15 406 19 4 61 15 404 14 69 77 15 407 19 4 61 15 404 1 412 12 19 2 89 15 404 15 228 15 413 19 3 214 1 404 73 29) #1# #2# 22283) #Y(si::bytecodes nil nil (15 414 15 58 15 415 15 416 19 4 61 15 414 14 69 77 15 417 19 4 61 15 414 1 429 12 14 131 9 2 19 4 89 1 414 73 29) #1# #2# 22558) #Y(si::bytecodes nil nil (1 430 16 3 1 431 52 430 15 430 15 58 15 432 15 433 19 4 61 1 430 73 29) #1# #2# 22943) #Y(si::bytecodes nil nil (15 434 15 58 15 435 15 436 19 4 61 15 434 14 69 77 15 437 19 4 61 15 434 1 443 12 19 2 89 1 434 73 29) #1# #2# 24590) #Y(si::bytecodes nil nil (15 444 15 58 15 445 15 446 19 4 61 15 444 14 69 77 15 447 19 4 61 15 444 1 450 12 19 2 89 1 444 73 29) #1# #2# 24722) #Y(si::bytecodes nil nil (15 451 15 58 15 452 15 453 19 4 61 15 451 14 69 77 15 454 19 4 61 15 451 1 469 12 19 2 89 1 451 73 29) #1# #2# 24813) #Y(si::bytecodes nil nil (15 470 15 58 15 471 15 472 19 4 61 15 470 14 69 77 15 473 19 4 61 15 470 1 475 12 19 2 89 1 470 73 29) #1# #2# 26230) #Y(si::bytecodes nil nil (1 476 16 3 1 477 52 476 15 476 15 58 15 478 15 479 19 4 61 1 476 73 29) #1# #2# 26295) #Y(si::bytecodes nil nil (15 480 15 58 15 481 15 482 19 4 61 15 480 14 69 77 77 19 4 61 15 480 1 484 12 19 2 89 1 480 73 29) #1# #2# 26361) #Y(si::bytecodes nil nil (1 485 16 3 75 52 485 15 485 15 58 15 486 15 487 19 4 61 1 485 73 29) #1# #2# 26506) #Y(si::bytecodes nil nil (1 488 16 3 14 440 33 441 12 19 2 489 52 488 15 488 15 58 15 490 15 491 19 4 61 1 488 73 29) #1# #2# 32520) #Y(si::bytecodes nil nil (15 492 15 58 15 493 15 494 19 4 61 15 492 14 69 77 77 19 4 61 15 492 1 496 12 19 2 89 1 492 73 29) #1# #2# 32583) #Y(si::bytecodes nil nil (15 497 15 58 15 498 15 499 19 4 61 15 497 14 69 77 15 500 19 4 61 15 497 1 505 12 19 2 89 1 497 73 29) #1# #2# 32664) #Y(si::bytecodes nil nil (15 506 15 58 15 507 15 508 19 4 61 15 506 14 69 77 15 509 19 4 61 15 506 1 513 12 19 2 89 1 506 73 29) #1# #2# 32863) #Y(si::bytecodes nil nil (15 497 15 58 15 514 15 515 19 4 61 15 497 15 506 9 1 19 3 516 1 497 73 29) #1# #2# 33049) #Y(si::bytecodes nil nil (15 517 15 58 15 518 15 519 19 4 61 15 517 14 69 77 15 520 19 4 61 15 517 1 523 12 19 2 89 1 517 73 29) #1# #2# 33076) #Y(si::bytecodes nil nil (15 524 15 58 15 525 15 526 19 4 61 15 524 14 69 77 15 527 19 4 61 15 524 1 537 12 19 2 89 1 524 73 29) #1# #2# 33287) #Y(si::bytecodes nil nil (15 538 15 58 15 539 15 540 19 4 61 15 538 14 69 77 15 541 19 4 61 15 538 34 548 12 19 2 89 1 538 73 29) #1# #2# 33483) #Y(si::bytecodes nil nil (15 549 15 58 15 550 15 551 19 4 61 15 549 14 69 77 77 19 4 61 15 549 1 558 12 19 2 89 1 549 73 29) #1# #2# 33794) #Y(si::bytecodes nil nil (15 559 15 58 15 560 15 561 19 4 61 15 559 14 69 77 15 562 19 4 61 15 559 1 565 12 19 2 89 1 559 73 29) #1# #2# 34610) #Y(si::bytecodes nil nil (15 566 15 58 15 567 15 568 19 4 61 15 566 14 69 77 77 19 4 61 15 566 1 570 12 19 2 89 1 566 73 29) #1# #2# 34822) #Y(si::bytecodes nil nil (15 571 15 58 15 572 15 573 19 4 61 15 571 14 69 77 15 574 19 4 61 15 571 1 579 12 19 2 89 1 571 73 29) #1# #2# 34977) #Y(si::bytecodes nil nil (15 580 15 58 15 581 15 582 19 4 61 15 580 14 69 77 15 583 19 4 61 15 580 1 590 12 19 2 89 1 580 73 29) #1# #2# 35185) #Y(si::bytecodes nil nil (15 591 15 58 15 592 15 593 19 4 61 15 591 14 69 77 77 19 4 61 15 591 1 600 12 19 2 89 1 591 73 29) #1# #2# 36194) #Y(si::bytecodes nil nil (1 601 16 3 1 602 52 601 15 601 15 58 15 603 15 604 19 4 61 1 601 73 29) #1# #2# 36730) #Y(si::bytecodes nil nil (1 605 16 3 8 541 52 605 15 605 15 58 15 606 15 607 19 4 61 1 605 73 29) #1# #2# 38728) #Y(si::bytecodes nil nil (15 608 15 58 15 609 15 610 19 4 61 15 608 14 69 77 15 611 19 4 61 15 608 1 613 12 19 2 89 1 608 73 29) #1# #2# 38770) #Y(si::bytecodes nil nil (15 614 15 58 15 615 15 616 19 4 61 15 614 14 69 77 15 617 19 4 61 15 614 1 625 12 19 2 89 1 614 73 29) #1# #2# 38800) #Y(si::bytecodes nil nil (15 626 15 58 15 627 15 628 19 4 61 15 626 14 69 77 15 629 19 4 61 15 626 1 633 12 19 2 89 1 626 73 29) #1# #2# 39452) #Y(si::bytecodes nil nil (15 632 15 58 15 634 15 635 19 4 61 15 632 14 69 77 15 636 19 4 61 15 632 1 643 12 19 2 89 1 632 73 29) #1# #2# 39656) #Y(si::bytecodes nil nil (15 642 15 58 15 644 15 645 19 4 61 15 642 14 69 77 15 646 19 4 61 15 642 1 650 12 19 2 89 1 642 73 29) #1# #2# 40030) #Y(si::bytecodes nil nil (15 640 15 58 15 651 15 652 19 4 61 15 640 14 69 77 15 653 19 4 61 15 640 1 655 12 19 2 89 1 640 73 29) #1# #2# 40234) #Y(si::bytecodes nil nil (15 656 15 58 15 657 15 658 19 4 61 15 656 14 69 77 15 659 19 4 61 15 656 34 670 12 19 2 89 1 656 73 29) #1# #2# 40277) #Y(si::bytecodes nil nil (15 671 15 58 15 672 15 673 19 4 61 15 671 14 69 77 15 674 19 4 61 15 671 1 681 12 19 2 89 1 671 73 29) #1# #2# 42869) #Y(si::bytecodes nil nil (15 682 15 58 15 683 15 684 19 4 61 15 682 14 69 77 77 19 4 61 15 682 1 687 12 19 2 89 1 682 73 29) #1# #2# 43025) #Y(si::bytecodes nil nil (15 688 15 58 15 689 15 690 19 4 61 15 688 14 69 77 15 691 19 4 61 15 688 1 698 12 19 2 89 1 688 73 29) #1# #2# 43176) #Y(si::bytecodes nil nil (15 699 15 58 15 700 15 701 19 4 61 15 699 14 69 77 77 19 4 61 15 699 34 723 12 19 2 89 1 699 73 29) #1# #2# 44525) #Y(si::bytecodes nil nil (15 724 15 58 15 725 15 726 19 4 61 15 724 14 69 77 15 727 19 4 61 15 724 1 730 12 19 2 89 15 724 15 228 15 731 19 3 214 1 724 73 29) #1# #2# 45101) #Y(si::bytecodes nil nil (15 732 15 58 15 733 15 734 19 4 61 15 732 14 69 77 15 735 19 4 61 15 732 1 741 12 19 2 89 15 732 15 228 15 742 19 3 214 1 732 73 29) #1# #2# 46903) #Y(si::bytecodes nil nil (15 743 15 58 15 744 15 745 19 4 61 15 743 14 69 77 15 746 19 4 61 15 743 1 748 12 19 2 89 15 743 15 228 15 749 19 3 214 1 743 73 29) #1# #2# 47500) #Y(si::bytecodes nil nil (15 750 15 58 15 751 15 752 19 4 61 15 750 14 69 77 15 753 19 4 61 15 750 1 764 12 19 2 89 15 750 15 228 15 765 19 3 214 1 750 73 29) #1# #2# 48128) #Y(si::bytecodes nil nil (15 766 77 77 77 15 767 15 768 15 769 77 77 77 15 770 9 5 77 15 771 15 772 19 15 773 15 774 15 58 15 775 15 776 19 4 61 15 777 15 58 15 778 15 779 19 4 61 15 777 14 69 77 15 780 19 4 61 15 766 19 1 804 78 801 15 777 1 803 12 19 2 89 1 790 16 805 45 806 10 0 39 10 10 0 16 807 39 4 11 808 76 39 16 15 809 15 810 15 811 15 812 14 813 13 0 19 6 814 43 1 15 790 15 815 1 822 12 19 3 823 1 794 16 805 45 806 10 0 39 10 10 0 16 807 39 4 11 808 76 39 16 15 809 15 810 15 811 15 824 14 813 13 0 19 6 814 43 1 15 794 15 815 1 826 12 19 3 823 1 796 16 805 45 806 10 0 39 10 10 0 16 807 39 4 11 808 76 39 16 15 809 15 810 15 811 15 827 14 813 13 0 19 6 814 43 1 15 796 15 815 1 829 12 19 3 823 1 799 16 805 45 806 10 0 39 10 10 0 16 807 39 4 11 808 76 39 16 15 809 15 810 15 811 15 830 14 813 13 0 19 6 814 43 1 15 799 15 815 1 832 12 19 3 823 1 800 16 805 45 806 10 0 39 10 10 0 16 807 39 4 11 808 76 39 16 15 809 15 810 15 811 15 833 14 813 13 0 19 6 814 43 1 15 800 15 815 1 835 12 19 3 823 1 766 73 29) #1# #2# 48989) #Y(si::bytecodes nil nil (15 836 15 58 15 837 15 838 19 4 61 15 836 14 69 77 15 839 19 4 61 15 836 34 845 12 19 2 89 15 836 15 228 15 846 19 3 214 1 836 73 29) #1# #2# 49269) #Y(si::bytecodes nil nil (15 847 15 58 15 848 15 849 19 4 61 15 847 14 69 77 15 850 19 4 61 15 847 1 856 12 19 2 89 15 847 15 228 15 857 19 3 214 1 847 73 29) #1# #2# 50226) #Y(si::bytecodes nil nil (15 858 15 58 15 859 15 860 19 4 61 15 858 14 69 77 15 861 19 4 61 15 858 1 877 12 19 2 89 15 858 15 228 15 878 19 3 214 1 858 73 29) #1# #2# 51077) #Y(si::bytecodes nil nil (15 879 15 58 15 880 15 881 19 4 61 15 879 14 69 77 15 882 19 4 61 15 879 1 892 12 19 2 89 15 879 15 228 15 893 19 3 214 1 879 73 29) #1# #2# 52352) #Y(si::bytecodes nil nil (15 894 15 58 15 895 15 896 19 4 61 15 894 14 69 77 15 897 19 4 61 15 894 1 904 12 19 2 89 15 894 15 228 15 905 19 3 214 1 894 73 29) #1# #2# 53639) #Y(si::bytecodes nil nil (15 906 15 58 15 907 15 908 19 4 61 15 906 14 69 77 15 909 19 4 61 15 906 1 910 12 19 2 89 15 906 15 228 15 911 19 3 214 1 906 73 29) #1# #2# 54025) #Y(si::bytecodes nil nil (15 912 15 58 15 913 15 914 19 4 61 15 912 14 69 77 15 915 19 4 61 15 912 1 916 12 19 2 89 15 912 15 228 15 917 19 3 214 1 912 73 29) #1# #2# 54427) #Y(si::bytecodes nil nil (15 918 15 58 15 919 15 920 19 4 61 15 918 14 69 77 15 921 19 4 61 15 918 1 925 12 19 2 89 15 918 15 228 15 926 19 3 214 1 918 73 29) #1# #2# 54579) #Y(si::bytecodes nil nil (15 927 15 58 15 928 15 929 19 4 61 15 927 14 69 77 15 930 19 4 61 15 927 1 936 12 19 2 89 15 927 15 228 15 937 19 3 214 1 927 73 29) #1# #2# 55019) #Y(si::bytecodes nil nil (15 938 15 58 15 939 15 940 19 4 61 15 938 14 69 77 15 941 19 4 61 15 938 1 942 12 19 2 89 15 938 15 228 15 943 19 3 214 1 938 73 29) #1# #2# 56052) #Y(si::bytecodes nil nil (15 944 15 58 15 945 15 946 19 4 61 15 944 14 69 77 15 947 19 4 61 15 944 1 949 12 19 2 89 15 944 15 228 15 950 19 3 214 1 944 73 29) #1# #2# 56607) #Y(si::bytecodes nil nil (15 951 15 58 15 952 15 953 19 4 61 15 951 14 69 77 15 954 19 4 61 15 951 1 958 12 19 2 89 15 951 15 228 15 959 19 3 214 1 951 73 29) #1# #2# 56842) #Y(si::bytecodes nil nil (15 960 15 58 15 961 15 962 19 4 61 15 960 14 69 77 15 963 19 4 61 15 960 1 964 12 19 2 89 15 960 15 228 15 965 19 3 214 1 960 73 29) #1# #2# 57251) #Y(si::bytecodes nil nil (1 966 16 967 29) #1# #2# 57360) #Y(si::bytecodes nil nil (15 968 15 58 15 969 15 970 19 4 61 15 968 14 69 77 77 19 4 61 15 968 1 976 12 19 2 89 1 968 73 29) #1# #2# 58743) #Y(si::bytecodes nil nil (15 974 15 58 15 977 15 978 19 4 61 15 974 14 69 77 15 979 19 4 61 15 974 1 988 12 19 2 89 15 974 15 228 15 989 19 3 214 1 974 73 29) #1# #2# 58947) #Y(si::bytecodes nil nil (15 971 15 58 15 990 15 991 19 4 61 15 971 14 69 77 15 992 19 4 61 15 971 1 1000 12 19 2 89 15 971 15 228 15 1001 19 3 214 1 971 73 29) #1# #2# 59559) #Y(si::bytecodes nil nil (15 997 15 58 15 1002 15 1003 19 4 61 15 997 14 69 77 15 1004 19 4 61 15 997 1 1008 12 19 2 89 1 997 73 29) #1# #2# 60109) #Y(si::bytecodes nil nil (15 1006 15 58 15 1009 15 1010 19 4 61 15 1006 14 69 77 15 1011 19 4 61 15 1006 1 1017 12 19 2 89 1 1006 73 29) #1# #2# 60415))
