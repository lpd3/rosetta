(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (372) ("ROS-01" si::select-package ros-01::applicable-divisors ext::location (defun ros-01::applicable-divisors) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/rosetta/rc-003.lisp" . 39) ext::annotate :lambda-list (ros-01::n) ros-01::n (and (integerp ros-01::n) (not (minusp ros-01::n))) si::assert-failure integerp minusp log ceiling oddp floor expt ros-01::candidate ros-01::divisors ros-01::quotients mod zerop / ros-01::quotient = t 1+ >= #Y(ros-01::applicable-divisors nil nil (24 45 9 26 38 6 15 10 19 1 11 10 0 16 12 39 6 10 0 16 13 76 76 40 -18 13 0 9 10 19 2 14 12 19 1 15 16 16 39 5 75 73 38 195 9 10 13 0 9 10 19 2 14 12 9 2 19 2 17 17 18 45 19 75 45 20 75 45 21 38 118 13 3 10 2 17 22 16 23 39 102 13 3 13 2 19 2 24 45 25 13 3 9 10 19 2 14 12 19 1 15 12 13 0 9 10 19 2 14 12 19 1 15 12 19 2 26 39 46 13 3 8 10 17 22 16 23 39 12 13 0 8 10 17 22 16 23 76 38 3 11 27 39 21 13 3 8 100 17 22 16 23 76 39 10 13 0 8 100 17 22 16 23 76 39 15 13 3 10 2 3 51 2 13 0 10 1 3 51 1 43 1 10 2 16 28 51 2 10 0 39 12 13 2 10 0 4 12 19 2 29 38 26 13 2 9 10 13 3 9 10 19 2 14 12 9 2 19 2 17 16 28 17 18 12 19 2 29 39 -158 13 1 13 0 72 2 43 3 29) #1# #2# 39) si::fset function "Returns two lists, one of divisors, the
  other of corresponding quotients. Both
  divisors and quotients meet the following
  criteria: (1) digit count is 1/2 of the digit 
  count of n. (2) At most one of the pair
  ends in at most one zero. Returns two
  nils if no applicable divisors found." si::set-documentation ros-01::hash-equal (defun ros-01::hash-equal) (#2# . 6101) (ros-01::table1 ros-01::table2 &key (ros-01::test (function eql)) ros-01::same-test-p) ros-01::table1 ros-01::table2 (nil :same-test-p :test) eql ros-01::test ros-01::same-test-p hash-table-test alexandria::hash-table-keys :test alexandria::set-equal alexandria::hash-table-values #Y(ros-01::hash-equal nil nil (24 45 39 24 45 40 28 41 22 40 4 33 42 12 46 43 22 40 2 77 46 44 57 35 60 65 10 1 39 19 10 4 16 45 12 10 3 16 45 17 42 76 39 5 75 73 36 0 13 4 19 1 46 12 13 3 19 1 46 12 14 47 13 2 19 4 48 73 39 20 13 4 19 1 49 12 13 3 19 1 49 12 14 47 13 2 19 4 48 63 29) #1# #2# 6101) "Tests two hash-tables for equality by
  comparing sets of keys and values. Kwargs
  include :test (defaulting to #'eql) and
  :same-test-p (defaulting to nil), which,
  if true, will also compare hash test 
  functions for equality." ros-01::fangs (defun ros-01::fangs) (#2# . 6793) (ros-01::n ros-01::app-div ros-01::app-quo) ros-01::app-div ros-01::app-quo "~D" format serapeum::frequencies ros-01::n-freq #:list103 ros-01::d #:list104 ros-01::q 0 "~A~A" "~D" "~D" ros-01::composite-freq #Y(ros-01::fangs nil nil (24 45 9 24 45 56 24 45 57 26 57 52 60 149 10 2 76 39 5 75 73 38 139 77 15 58 13 3 19 3 59 12 19 1 60 45 61 75 45 62 75 45 63 75 45 64 75 45 65 57 66 61 2 10 102 10 8 51 4 10 7 51 2 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 77 15 67 77 15 68 13 3 19 3 59 12 77 15 69 13 1 19 3 59 12 19 4 59 12 19 1 60 45 70 13 6 13 0 19 2 35 39 14 13 10 13 4 10 2 6 2 6 2 73 36 7 43 1 35 0 0 62 75 73 43 5 63 29) #1# #2# 6793) ros-01::vampire-main (defun ros-01::vampire-main) (#2# . 7331) "~%The first 25 vampire numbers with fangs.~%" count + > ros-01::fang-list "~%~A" #:g1840 100000 999999 "~%~A" #:g1843 "~%~%For~%~
            16758243290880, ~%~
            24959017348650, ~%~
            and ~%~
            14593825548650, ~%~
            we have:~%" (16758243290880 24959017348650 14593825548650) si::%dolist-var "~%~A" #Y(ros-01::vampire-main nil nil (26 14 27 15 75 19 2 59 8 0 45 76 75 45 9 57 66 61 2 6 82 8 1259 51 1 13 1 9 1 19 2 77 51 1 13 1 9 9999 19 2 78 39 4 35 0 1 13 1 19 1 2 47 1 21 45 20 13 3 13 0 13 1 19 3 52 45 79 10 0 39 25 14 27 15 80 13 0 19 3 59 8 1 45 81 13 6 13 0 19 2 77 51 6 43 1 43 1 43 2 35 0 0 62 43 1 75 45 9 57 66 61 2 6 94 1 82 51 1 13 1 9 1 19 2 77 51 1 13 1 15 83 19 2 78 39 4 35 0 1 13 2 9 25 19 2 29 39 4 35 0 1 13 1 19 1 2 47 1 21 45 20 13 3 13 0 13 1 19 3 52 45 79 10 0 39 25 14 27 15 84 13 0 19 3 59 8 1 45 85 13 6 13 0 19 2 77 51 6 43 1 43 1 43 2 35 0 0 62 43 1 14 27 15 86 19 2 59 1 87 45 88 38 51 10 0 4 45 9 13 0 19 1 2 47 1 21 45 20 13 2 13 0 13 1 19 3 52 45 79 10 0 39 10 14 27 15 89 13 0 19 3 59 43 1 43 2 10 1 5 51 1 43 1 10 0 40 -53 75 73 43 1 43 1 29) #1# #2# 7331) ros-01::slurp-file (defun ros-01::slurp-file) (#2# . 8447) (ros-01::path) ros-01::path open ros-01::f :eof read-line ros-01::line ros-01::lines eq nreverse close :abort #Y(ros-01::slurp-file nil nil (24 45 95 26 13 0 19 1 96 45 97 64 63 77 13 0 77 14 98 77 19 4 99 12 46 100 46 101 38 20 13 1 10 0 3 51 0 13 2 77 14 98 77 19 4 99 12 53 1 13 1 11 98 17 102 39 -26 10 0 16 103 43 2 69 10 0 39 6 13 0 19 1 104 70 65 10 0 39 10 13 0 14 105 14 27 19 3 104 66 43 1 29) #1# #2# 8447) "Returns a list of lines." ros-01::sort-ints-for-biggest-concat (defun ros-01::sort-ints-for-biggest-concat) (#2# . 9530) (ros-01::num-list) ros-01::num-list serapeum::dict max #Y(nil nil nil (24 45 9 26 13 0 9 10 19 2 14 12 19 1 15 29) #1# #2# 9530) mapcar apply ros-01::max-len ros-01::num-dict ros-01::log10 ros-01::len si::hash-set ros-01::key ros-01::new-len * :key ros-01::m gethash #Y(nil nil nil (24 45 127 26 13 0 13 1 19 2 128 29) #1# #2# 9530) sort #Y(ros-01::sort-ints-for-biggest-concat nil nil (24 45 112 26 19 0 113 12 33 114 12 1 115 12 13 0 19 2 116 12 19 2 117 12 46 118 46 119 10 2 45 88 38 136 10 0 4 45 9 13 0 9 10 19 2 14 45 120 13 0 8 1 17 22 16 23 39 7 10 0 16 28 38 6 13 0 19 1 15 45 121 13 0 13 5 19 2 26 39 12 13 2 13 4 13 2 19 3 122 38 70 75 45 123 75 45 124 57 66 61 2 17 46 13 5 9 10 19 2 125 51 2 10 3 16 28 51 1 13 1 13 8 19 2 26 39 4 35 0 1 13 2 9 10 19 2 125 51 2 10 1 16 28 51 1 35 0 0 13 5 13 7 13 2 19 3 122 62 43 2 43 2 10 1 5 51 1 43 1 10 0 40 -138 43 1 13 2 33 78 12 14 126 34 129 12 19 4 130 43 2 29) #1# #2# 9530) ros-01::greatest-concatenation (defun ros-01::greatest-concatenation) (#2# . 11384) (ros-01::num-list) ros-01::sorted "~{~D~}" parse-integer #Y(ros-01::greatest-concatenation nil nil (24 45 112 26 13 0 19 1 108 45 136 9 0 77 15 137 13 0 19 3 59 12 19 1 138 74 73 43 1 29) #1# #2# 11384) long-float *read-default-float-format* ros-01::quadratic (defun ros-01::quadratic) (#2# . 11592) (ros-01::a ros-01::b ros-01::c) ros-01::a ros-01::b ros-01::c (not (zerop ros-01::a)) - sqrt 1/2 #Y(ros-01::quadratic nil nil (24 45 146 24 45 147 24 45 148 26 38 6 15 149 19 1 11 10 2 16 23 76 76 40 -12 10 1 16 23 39 37 13 0 19 1 150 12 13 2 19 2 24 16 151 12 13 0 19 1 150 12 13 2 19 2 24 16 151 12 19 1 150 12 72 2 38 89 13 2 13 0 19 2 125 16 151 12 13 1 19 2 24 45 65 15 152 9 1 9 4 13 0 13 0 19 3 125 12 19 2 150 16 151 12 9 2 19 2 24 12 19 2 77 45 97 13 3 19 1 150 12 13 4 19 2 24 12 13 0 19 2 125 12 13 2 19 1 150 12 13 3 13 0 19 2 125 12 19 2 24 12 72 2 43 2 29) #1# #2# 11592) (inline ros-01::%jensen-sum) proclaim ros-01::%jensen-sum (defun ros-01::%jensen-sum) (#2# . 16574) (ros-01::lo ros-01::hi ros-01::fun) ros-01::lo ros-01::hi ros-01::fun #:loop-limit1914 ros-01::i #:loop-sum-1915 #Y(ros-01::%jensen-sum nil nil (24 45 160 24 45 161 24 45 162 26 58 60 67 13 3 13 2 46 163 46 164 8 0 45 165 57 66 61 2 2 37 13 2 13 3 19 2 78 39 4 35 0 1 13 1 13 5 13 2 20 1 23 12 19 2 77 51 1 10 2 16 28 51 2 35 0 0 10 1 73 36 4 62 73 43 1 43 2 63 29) #1# #2# 16574) ros-01::jensen-sum (defmacro ros-01::jensen-sum) (#2# . 16664) (ros-01::i ros-01::lo ros-01::hi ros-01::term) #:g1917 #:g1916 #:g1918 si::dm-too-few-arguments ros-01::term si::dm-too-many-arguments lambda #Y(ros-01::jensen-sum nil nil (24 45 171 24 45 172 26 10 1 5 45 173 10 0 76 39 6 13 2 19 1 174 10 0 4 12 10 0 5 51 0 22 45 164 10 1 76 39 6 13 3 19 1 174 10 1 4 12 10 1 5 51 1 22 45 160 10 2 76 39 6 13 4 19 1 174 10 2 4 12 10 2 5 51 2 22 45 161 10 3 76 39 6 13 5 19 1 174 10 3 4 12 10 3 5 51 3 22 45 175 10 4 39 6 13 6 19 1 176 15 156 13 2 13 1 15 177 10 3 6 1 12 10 0 6 3 6 4 73 29) #1# #2# 16664) ros-01::gregorian-easter (defun ros-01::gregorian-easter) (#2# . 16761) (ros-01::year) ros-01::year (<= 1583 ros-01::year 2100) "Date ~D out of range (1583-2100) for ~%~
    gregorian-easter." <= ros-01::e ros-01::g ros-01::h ros-01::k ros-01::l ros-01::month ros-01::day #Y(ros-01::gregorian-easter nil nil (24 45 183 26 38 12 15 184 77 77 15 185 13 0 19 5 11 9 1583 13 0 9 2100 19 3 186 76 40 -22 13 0 8 19 17 22 45 146 13 1 9 100 19 2 17 45 147 13 2 8 100 17 22 45 148 13 1 9 4 19 2 17 45 63 13 2 8 4 17 22 45 187 9 8 13 3 19 2 125 12 9 13 19 2 77 12 9 25 19 2 17 45 188 9 19 13 5 19 2 125 12 13 4 13 2 19 1 150 12 13 0 19 1 150 12 9 15 19 5 77 12 8 30 17 22 45 189 13 4 9 4 19 2 17 45 164 13 5 8 4 17 22 45 190 9 32 9 2 13 4 19 2 125 12 9 2 13 1 19 2 125 12 13 2 19 1 150 12 13 0 19 1 150 12 19 5 77 12 8 7 17 22 45 191 13 9 9 11 13 3 19 2 125 12 9 19 13 0 19 2 125 12 19 3 77 12 9 433 19 2 17 45 127 13 4 13 1 9 7 13 0 19 2 125 12 19 1 150 12 9 90 19 4 77 12 9 25 19 2 17 45 192 13 5 13 2 9 7 13 1 19 2 125 12 19 1 150 12 9 33 13 0 19 2 125 12 9 19 19 5 77 12 8 32 17 22 45 193 13 0 13 1 72 2 43 13 29) #1# #2# 16761) "System for determining the date of 
  Easter since 1583 in Catholic countries
  and in Protestant countries beginning
  at various years up until 1845,
  by means of an anonymous algorithm that
  appeared in the journal Nature in 1876 
  (Meeus/Jones/Butcher algorithm) and as 
  tidied up by a 1961 article in New
  Scientist. Returns 2 values: day and
  integer (1-12) month." ros-01::julian-easter (defun ros-01::julian-easter) (#2# . 21988) (ros-01::year) (<= 400 ros-01::year 2100) "Year ~D out of range (400-2100) for ~%~
    julian-easter" #Y(ros-01::julian-easter nil nil (24 45 183 26 38 12 15 200 77 77 15 201 13 0 19 5 11 9 400 13 0 9 2100 19 3 186 76 40 -22 13 0 8 4 17 22 45 146 13 1 8 7 17 22 45 147 13 2 8 19 17 22 45 148 9 19 13 0 19 2 125 12 9 15 19 2 77 12 8 30 17 22 45 63 9 2 13 3 19 2 125 12 9 4 13 2 19 2 77 12 13 0 19 1 150 12 9 34 19 4 77 12 8 7 17 22 45 187 13 1 13 0 9 114 19 3 77 12 9 31 19 2 17 45 192 13 2 13 1 9 114 19 3 77 12 8 31 17 22 16 28 45 193 13 0 13 1 72 2 43 7 29) #1# #2# 21988) "Method of calculating (Orthodox) Easter. 
  Returns two values: day and month. The
  date returned is in the Julian calendar.
  Since the date of Easter was formally
  proclaimed ad hoc before about 440, 
  it will not accept years before then. 
  For years 440 through 1582, the date 
  returned was Easter everywhere. From
  1583 on, the date corresponds with 
  Orthodox Easter, and up unil 1845
  Easter in various protestant 
  countries (the date of adoption
  of the Gregorian calendar was 1583 for
  Catholic countries with Protestant 
  countries changing individually at 
  various times. While even all Eastern 
  countries eventually adopted the 
  Gregorian calendar as a Civil 
  calendar by the end of the 1920s, the 
  Julian calendar was retained for
  religious use. The algorithm is Meeus's
  algorithm." ros-01::date->day (defun ros-01::date->day) (#2# . 23418) (ros-01::day ros-01::month) 3 4 5 6 7 #Y(ros-01::date->day nil nil (24 45 193 24 45 192 26 10 0 42 208 6 10 1 73 38 51 42 209 10 13 1 9 31 19 2 77 38 39 42 210 10 13 1 9 61 19 2 77 38 27 42 211 10 13 1 9 92 19 2 77 38 15 42 212 10 13 1 9 122 19 2 77 38 3 75 73 29) #1# #2# 23418) ros-01::day->date (defun ros-01::day->date) (#2# . 23553) (ros-01::day) "Day out of range day->date" error #Y(ros-01::day->date nil nil (24 45 193 26 13 0 9 31 19 2 186 39 9 13 0 9 3 72 2 38 98 13 0 9 61 19 2 186 39 15 13 0 9 31 19 2 150 12 9 4 72 2 38 75 13 0 9 92 19 2 186 39 15 13 0 9 61 19 2 150 12 9 5 72 2 38 52 13 0 9 122 19 2 186 39 15 13 0 9 92 19 2 150 12 9 6 72 2 38 29 13 0 9 153 19 2 186 39 15 13 0 9 122 19 2 150 12 9 7 72 2 38 6 15 218 19 1 219 29) #1# #2# 23553) ros-01::date-+ (defun ros-01::date-+) (#2# . 23846) (ros-01::day ros-01::month ros-01::days) ros-01::days #Y(ros-01::date-+ nil nil (24 45 193 24 45 192 24 45 225 26 13 2 13 1 19 2 204 12 13 0 19 2 77 12 19 1 214 29) #1# #2# 23846) ros-01::easter-date (defun ros-01::easter-date) (#2# . 23929) (ros-01::year) (<= 440 ros-01::year 2100) "Year ~D out of range (440-2100) ~%~
    for easter-date." < :julian :gregorian #Y(ros-01::easter-date nil nil (24 45 183 26 38 10 15 231 77 77 15 232 19 4 11 9 440 13 0 9 2100 19 3 186 76 40 -20 13 0 9 1583 19 2 233 39 23 13 0 19 1 196 47 1 192 45 193 13 0 13 1 14 234 72 3 43 2 38 21 13 0 19 1 179 47 1 192 45 193 13 0 13 1 14 235 72 3 43 2 29) #1# #2# 23929) "Given a year between AD 440 and 2100, 
  returns three values: day, month, 
  and either :julian (440-1582) or
  :gregorian (1583-2100)." ros-01::n->month (defun ros-01::n->month) (#2# . 24467) (ros-01::n) (nil ros-01::jan ros-01::feb ros-01::mar ros-01::apr ros-01::may ros-01::jun ros-01::jul ros-01::aug ros-01::sep ros-01::oct ros-01::nov ros-01::dec) nth #Y(ros-01::n->month nil nil (24 45 9 26 13 0 1 242 17 243 29) #1# #2# 24467) ros-01::easter-main (defun ros-01::easter-main) (#2# . 24578) "1. Easter 2. Orthodox Easter 3. Ascension ~%~
    4. Orthodox Ascension 5. Pentecost 6. Orthodox Pentecost ~%~
    7. Trinity Sunday 8. Orthodox Trinity ~%~
    9. Corpus Christi (Western only) ~%~
    10. All Saints Sunday (Orthodox Only)" :start :step alexandria::iota append ros-01::years #:list116 ros-01::jday ros-01::jmonth ros-01::aday ros-01::amonth ros-01::oaday ros-01::oamonth ros-01::pday ros-01::pmonth ros-01::opday ros-01::opmonth ros-01::tday ros-01::tmonth ros-01::otday ros-01::otmonth ros-01::ccday ros-01::ccmonth ros-01::asday ros-01::asmonth "~%~%1. ~A ~D, ~D; ~A" "Jul." "Gre." "~%2. ~A ~D, ~D; Jul." "~%3. ~A ~D, ~D: ~A" "Jul." "Gre." "~%4. ~A ~D, ~D; Jul." "~%5. ~A ~D, ~D; ~A." "Jul." "Gre." "~%6. ~A ~D, ~D; Jul." "~%7. ~A ~D, ~D; ~A" "Jul." "Gre." "~%8. ~A ~D, ~D; Jul." "~%9. ~A ~D, ~D; ~A" "Jul." "Gre." "~%10. ~A ~D, ~D; Jul." #Y(ros-01::easter-main nil nil (26 14 27 15 248 19 2 59 9 17 14 249 9 500 14 250 9 100 19 5 251 12 9 11 14 249 9 2010 19 3 251 12 19 2 252 45 253 75 45 254 75 45 183 75 45 193 75 45 192 75 45 255 75 45 256 75 45 257 75 45 258 75 45 259 75 45 260 75 45 261 75 45 262 75 45 263 75 45 264 75 45 265 75 45 266 75 45 267 75 45 268 75 45 269 75 45 270 75 45 271 75 45 272 57 66 61 2 6 436 10 23 51 22 10 22 2 39 4 35 0 1 10 22 4 51 21 10 22 5 51 22 13 21 19 1 227 51 20 55 19 1 13 21 19 1 196 51 18 55 17 1 13 20 13 19 9 39 19 3 221 51 16 55 15 1 13 18 13 17 9 39 19 3 221 51 14 55 13 1 13 20 13 19 9 49 19 3 221 51 12 55 11 1 13 18 13 17 9 49 19 3 221 51 10 55 9 1 13 20 13 19 9 56 19 3 221 51 8 55 7 1 13 18 13 17 9 56 19 3 221 51 6 55 5 1 13 20 13 19 9 60 19 3 221 51 4 55 3 1 13 18 13 17 9 73 19 3 221 51 2 55 1 1 14 27 15 273 13 19 19 1 238 12 13 20 13 21 13 21 9 1583 19 2 233 39 6 1 274 73 38 4 1 275 73 12 19 6 59 14 27 15 276 13 17 19 1 238 12 13 18 13 21 19 5 59 14 27 15 277 13 15 19 1 238 12 13 16 13 21 13 21 9 1583 19 2 233 39 6 1 278 73 38 4 1 279 73 12 19 6 59 14 27 15 280 13 13 19 1 238 12 13 14 13 21 19 5 59 14 27 15 281 13 11 19 1 238 12 13 12 13 21 13 21 9 1583 19 2 233 39 6 1 282 73 38 4 1 283 73 12 19 6 59 14 27 15 284 13 9 19 1 238 12 13 10 13 21 19 5 59 13 21 9 1315 19 2 78 39 53 14 27 15 285 13 7 19 1 238 12 13 8 13 21 13 21 9 1583 19 2 233 39 6 1 286 73 38 4 1 287 73 12 19 6 59 14 27 15 288 13 5 19 1 238 12 13 6 13 21 19 5 59 13 21 9 1245 19 2 78 39 36 14 27 15 289 13 3 19 1 238 12 13 4 13 21 13 21 9 1583 19 2 233 39 6 1 290 73 38 4 1 291 73 12 19 6 59 14 27 15 292 13 1 19 1 238 12 13 2 13 21 19 5 59 35 0 0 62 75 73 43 23 29) #1# #2# 24578) ros-01::amean (defun ros-01::amean) (#2# . 26591) (ros-01::num-list) 0.0 length 0.0d0 float #Y(ros-01::amean nil nil (24 45 112 26 10 0 76 39 6 1 298 73 38 24 33 77 12 13 0 19 2 117 12 10 0 16 299 12 19 2 24 12 15 300 19 2 301 29) #1# #2# 26591) ros-01::gmean (defun ros-01::gmean) (#2# . 33370) (ros-01::num-list) #Y(ros-01::gmean nil nil (24 45 112 26 10 0 76 39 6 8 1 73 38 26 33 125 12 13 0 19 2 117 12 10 0 16 299 12 19 1 24 17 18 12 15 300 19 2 301 29) #1# #2# 33370) ros-01::hmean (defun ros-01::hmean) (#2# . 33574) (ros-01::num-list) (and ros-01::num-list (notany (function zerop) ros-01::num-list)) "Cannot take the harmonic mean of an ~%~
    empty list or one that contains 0." notany reduce ros-01::denom "Sum of reciprocals of num-list ~%~
         is 0. hmean." #Y(ros-01::hmean nil nil (24 45 112 26 38 10 15 312 77 77 15 313 19 4 11 10 0 39 9 33 23 12 13 0 19 2 314 76 40 -23 33 77 12 33 24 12 13 0 19 2 116 12 19 2 315 45 316 10 0 16 23 39 8 15 317 19 1 219 38 17 10 1 16 299 12 13 0 19 2 24 12 15 300 19 2 301 43 1 29) #1# #2# 33574) ros-01::average/pythag-main (defun ros-01::average/pythag-main) (#2# . 34018) ros-01::nums "~%nums: ~A" "~%Arithmetic Mean: ~F" "~%Geometric Mean: ~F" "~%Harmonic Mean: ~F" #Y(ros-01::average/pythag-main nil nil (26 9 10 14 249 9 1 19 3 251 45 322 14 27 15 323 13 0 19 3 59 14 27 15 324 13 0 19 1 294 12 19 3 59 14 27 15 325 13 0 19 1 303 12 19 3 59 14 27 15 326 13 0 19 1 308 12 19 3 59 43 1 29) #1# #2# 34018) ros-01::tval (defun ros-01::tval) (#2# . 34341) (ros-01::tree) ros-01::tree #Y(ros-01::tval nil nil (24 45 332 26 10 0 4 73 29) #1# #2# 34341) "Value of a tree/node" ros-01::tchildren (defun ros-01::tchildren) (#2# . 37911) (ros-01::tree) #Y(ros-01::tchildren nil nil (24 45 332 26 10 0 5 73 29) #1# #2# 37911) "Children of a tree/node, as a 
  list of nodes, or nil if there are no
  children" ros-01::nth-tchild (defun ros-01::nth-tchild) (#2# . 38053) (ros-01::n ros-01::tree) #Y(ros-01::nth-tchild nil nil (24 45 9 24 45 332 26 13 1 13 0 19 1 335 17 243 29) #1# #2# 38053) "Retrieve the nth child, 0 indexed,
  left to right, of the node/tree, or nil
  if there is no such child." ros-01::print-nest (defun ros-01::print-nest) (#2# . 38273) (ros-01::tree &optional (ros-01::indent 0)) ros-01::indent "~%~VT~A" ros-01::child #Y(ros-01::print-nest nil nil (24 45 332 25 40 3 9 0 46 351 26 14 27 15 352 13 0 13 1 19 1 328 12 19 4 59 13 1 19 1 335 45 88 38 26 10 0 4 45 353 13 0 13 2 9 5 19 2 77 12 19 2 347 10 1 5 51 1 43 1 10 0 40 -28 75 73 43 1 29) #1# #2# 38273) ros-01::print-indent (defun ros-01::print-indent) (#2# . 38467) (ros-01::tree &optional (ros-01::level 0)) ros-01::level "~%~D. ~A" #Y(ros-01::print-indent nil nil (24 45 332 25 40 3 9 0 46 359 26 14 27 15 360 13 0 13 1 19 1 328 12 19 4 59 13 1 19 1 335 45 88 38 23 10 0 4 45 353 13 0 10 2 16 28 12 19 2 355 10 1 5 51 1 43 1 10 0 40 -25 75 73 43 1 29) #1# #2# 38467) ros-01::tree-main (defun ros-01::tree-main) (#2# . 38630) ("RosettaCode" ("rocks" ("code") ("comparison") ("wiki")) ("mocks" ("trolling"))) ros-01::my-tree "~%Underlying Structure:~%" "~%~A" "~2%Nesting display:~%" "~2%Indented display:~%" #Y(ros-01::tree-main nil nil (26 1 365 45 366 14 27 15 367 19 2 59 14 27 15 368 13 0 19 3 59 14 27 15 369 19 2 59 13 0 19 1 347 14 27 15 370 19 2 59 13 0 19 1 355 43 1 29) #1# #2# 38630))) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 1 30 12 19 2 31 15 2 15 32 15 33 19 3 34 1 2 73 29) #1# #2# 39) #Y(si::bytecodes nil nil (15 35 15 3 15 36 15 37 19 4 6 15 35 14 7 77 15 38 19 4 6 15 35 1 50 12 19 2 31 15 35 15 32 15 51 19 3 34 1 35 73 29) #1# #2# 6101) #Y(si::bytecodes nil nil (15 52 15 3 15 53 15 54 19 4 6 15 52 14 7 77 15 55 19 4 6 15 52 1 71 12 19 2 31 1 52 73 29) #1# #2# 6793) #Y(si::bytecodes nil nil (15 72 15 3 15 73 15 74 19 4 6 15 72 14 7 77 77 19 4 6 15 72 1 90 12 19 2 31 1 72 73 29) #1# #2# 7331) #Y(si::bytecodes nil nil (15 91 15 3 15 92 15 93 19 4 6 15 91 14 7 77 15 94 19 4 6 15 91 1 106 12 19 2 31 15 91 15 32 15 107 19 3 34 1 91 73 29) #1# #2# 8447) #Y(si::bytecodes nil nil (15 108 15 3 15 109 15 110 19 4 6 15 108 14 7 77 15 111 19 4 6 15 108 34 131 12 19 2 31 1 108 73 29) #1# #2# 9530) #Y(si::bytecodes nil nil (15 132 15 3 15 133 15 134 19 4 6 15 132 14 7 77 15 135 19 4 6 15 132 1 139 12 19 2 31 1 132 73 29) #1# #2# 11384) #Y(si::bytecodes nil nil (1 140 48 141 15 142 15 3 15 143 15 144 19 4 6 15 142 14 7 77 15 145 19 4 6 15 142 1 153 12 19 2 31 1 142 73 44 1 29) #1# #2# 11592) #Y(si::bytecodes nil nil (1 154 16 155 29) #1# #2# 14614) #Y(si::bytecodes nil nil (15 156 15 3 15 157 15 158 19 4 6 15 156 14 7 77 15 159 19 4 6 15 156 1 166 12 19 2 31 1 156 73 29) #1# #2# 16574) #Y(si::bytecodes nil nil (15 167 15 3 15 168 15 169 19 4 6 15 167 14 7 77 15 170 19 4 6 15 167 1 178 12 14 27 9 5 19 4 31 1 167 73 29) #1# #2# 16664) #Y(si::bytecodes nil nil (15 179 15 3 15 180 15 181 19 4 6 15 179 14 7 77 15 182 19 4 6 15 179 1 194 12 19 2 31 15 179 15 32 15 195 19 3 34 1 179 73 29) #1# #2# 16761) #Y(si::bytecodes nil nil (15 196 15 3 15 197 15 198 19 4 6 15 196 14 7 77 15 199 19 4 6 15 196 1 202 12 19 2 31 15 196 15 32 15 203 19 3 34 1 196 73 29) #1# #2# 21988) #Y(si::bytecodes nil nil (15 204 15 3 15 205 15 206 19 4 6 15 204 14 7 77 15 207 19 4 6 15 204 1 213 12 19 2 31 1 204 73 29) #1# #2# 23418) #Y(si::bytecodes nil nil (15 214 15 3 15 215 15 216 19 4 6 15 214 14 7 77 15 217 19 4 6 15 214 1 220 12 19 2 31 1 214 73 29) #1# #2# 23553) #Y(si::bytecodes nil nil (15 221 15 3 15 222 15 223 19 4 6 15 221 14 7 77 15 224 19 4 6 15 221 1 226 12 19 2 31 1 221 73 29) #1# #2# 23846) #Y(si::bytecodes nil nil (15 227 15 3 15 228 15 229 19 4 6 15 227 14 7 77 15 230 19 4 6 15 227 1 236 12 19 2 31 15 227 15 32 15 237 19 3 34 1 227 73 29) #1# #2# 23929) #Y(si::bytecodes nil nil (15 238 15 3 15 239 15 240 19 4 6 15 238 14 7 77 15 241 19 4 6 15 238 1 244 12 19 2 31 1 238 73 29) #1# #2# 24467) #Y(si::bytecodes nil nil (15 245 15 3 15 246 15 247 19 4 6 15 245 14 7 77 77 19 4 6 15 245 1 293 12 19 2 31 1 245 73 29) #1# #2# 24578) #Y(si::bytecodes nil nil (15 294 15 3 15 295 15 296 19 4 6 15 294 14 7 77 15 297 19 4 6 15 294 1 302 12 19 2 31 1 294 73 29) #1# #2# 26591) #Y(si::bytecodes nil nil (15 303 15 3 15 304 15 305 19 4 6 15 303 14 7 77 15 306 19 4 6 15 303 1 307 12 19 2 31 1 303 73 29) #1# #2# 33370) #Y(si::bytecodes nil nil (15 308 15 3 15 309 15 310 19 4 6 15 308 14 7 77 15 311 19 4 6 15 308 1 318 12 19 2 31 1 308 73 29) #1# #2# 33574) #Y(si::bytecodes nil nil (15 319 15 3 15 320 15 321 19 4 6 15 319 14 7 77 77 19 4 6 15 319 1 327 12 19 2 31 1 319 73 29) #1# #2# 34018) #Y(si::bytecodes nil nil (15 328 15 3 15 329 15 330 19 4 6 15 328 14 7 77 15 331 19 4 6 15 328 1 333 12 19 2 31 15 328 15 32 15 334 19 3 34 1 328 73 29) #1# #2# 34341) #Y(si::bytecodes nil nil (15 335 15 3 15 336 15 337 19 4 6 15 335 14 7 77 15 338 19 4 6 15 335 1 339 12 19 2 31 15 335 15 32 15 340 19 3 34 1 335 73 29) #1# #2# 37911) #Y(si::bytecodes nil nil (15 341 15 3 15 342 15 343 19 4 6 15 341 14 7 77 15 344 19 4 6 15 341 1 345 12 19 2 31 15 341 15 32 15 346 19 3 34 1 341 73 29) #1# #2# 38053) #Y(si::bytecodes nil nil (15 347 15 3 15 348 15 349 19 4 6 15 347 14 7 77 15 350 19 4 6 15 347 1 354 12 19 2 31 1 347 73 29) #1# #2# 38273) #Y(si::bytecodes nil nil (15 355 15 3 15 356 15 357 19 4 6 15 355 14 7 77 15 358 19 4 6 15 355 1 361 12 19 2 31 1 355 73 29) #1# #2# 38467) #Y(si::bytecodes nil nil (15 362 15 3 15 363 15 364 19 4 6 15 362 14 7 77 77 19 4 6 15 362 1 371 12 19 2 31 1 362 73 29) #1# #2# 38630))
